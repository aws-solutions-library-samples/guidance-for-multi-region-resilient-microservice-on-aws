{
 "Description": "Global Routing - Stack needs to be managed from US-West-2",
 "AWSTemplateFormatVersion": "2010-09-09",
 "Parameters": {
  "Env": {
   "Type": "String",
   "Default": "",
   "Description": "String to enable multiple deployments per AWS region"
  },
  "PrimaryRegion": {
   "Type": "String",
   "Default": "us-east-1",
   "Description": "Enter the Primary Region"
  },
  "StandbyRegion": {
   "Type": "String",
   "Default": "us-west-2",
   "Description": "Enter the Standby Region"
  },
  "DomainName": {
   "Type": "String",
   "Description": "The name of the domain that you want created as a private hosted zone in Route53"
  },
  "KmsKey": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "KmsKey",
   "Description": "CMK Id"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Resources": {
  "ArcCluster": {
   "Type": "AWS::Route53RecoveryControl::Cluster",
   "Properties": {
    "Name": {
     "Fn::Sub": "retail-store-ar-ArcCluster${Env}"
    }
   }
  },
  "ArcControlPanel": {
   "Type": "AWS::Route53RecoveryControl::ControlPanel",
   "Properties": {
    "ClusterArn": {
     "Fn::GetAtt": "ArcCluster.ClusterArn"
    },
    "Name": {
     "Fn::Sub": "retail-store-ar-ArcControlPanel${Env}"
    }
   }
  },
  "ArcRoutingControlPrimary": {
   "Type": "AWS::Route53RecoveryControl::RoutingControl",
   "Properties": {
    "ClusterArn": {
     "Fn::GetAtt": "ArcCluster.ClusterArn"
    },
    "ControlPanelArn": {
     "Fn::GetAtt": "ArcControlPanel.ControlPanelArn"
    },
    "Name": {
     "Fn::Sub": "retail-store-ar-ArcRoutingControlPrimary${Env}"
    }
   }
  },
  "ArcRoutingControlStandby": {
   "Type": "AWS::Route53RecoveryControl::RoutingControl",
   "Properties": {
    "ClusterArn": {
     "Fn::GetAtt": "ArcCluster.ClusterArn"
    },
    "ControlPanelArn": {
     "Fn::GetAtt": "ArcControlPanel.ControlPanelArn"
    },
    "Name": {
     "Fn::Sub": "retail-store-ar-ArcRoutingControlStandby${Env}"
    }
   }
  },
  "ArcHealthCheckPrimary": {
   "Type": "AWS::Route53::HealthCheck",
   "Properties": {
    "HealthCheckConfig": {
     "RoutingControlArn": {
      "Fn::GetAtt": "ArcRoutingControlPrimary.RoutingControlArn"
     },
     "Type": "RECOVERY_CONTROL"
    },
    "HealthCheckTags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Sub": "retail-store-ar-ArcHealthCheckPrimary${Env}"
      }
     }
    ]
   }
  },
  "ArcHealthCheckStandby": {
   "Type": "AWS::Route53::HealthCheck",
   "Properties": {
    "HealthCheckConfig": {
     "RoutingControlArn": {
      "Fn::GetAtt": "ArcRoutingControlStandby.RoutingControlArn"
     },
     "Type": "RECOVERY_CONTROL"
    },
    "HealthCheckTags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Sub": "retail-store-ar-ArcHealthCheckStandby${Env}"
      }
     }
    ]
   }
  },
  "ArcRoutingControlPrimarySecret": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "ARC Routing Control ARN",
    "KmsKeyId": {
     "Ref": "KmsKey"
    },
    "Name": {
     "Fn::Sub": "ArcRoutingControlPrimarySecret${Env}"
    },
    "ReplicaRegions": [
     {
      "Region": {
       "Ref": "StandbyRegion"
      }
     }
    ],
    "SecretString": {
     "Ref": "ArcRoutingControlPrimary"
    }
   }
  },
  "ArcHealthCheckIdPrimary": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Name": {
     "Fn::Sub": "ArcHealthCheckIdPrimary${Env}"
    },
    "Type": "String",
    "Value": {
     "Ref": "ArcHealthCheckPrimary"
    }
   }
  },
  "ArcRoutingControlStandbySecret": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "ARC Routing Control ARN",
    "KmsKeyId": {
     "Ref": "KmsKey"
    },
    "Name": {
     "Fn::Sub": "ArcRoutingControlStandbySecret${Env}"
    },
    "ReplicaRegions": [
     {
      "Region": {
       "Ref": "StandbyRegion"
      }
     }
    ],
    "SecretString": {
     "Ref": "ArcRoutingControlStandby"
    }
   }
  },
  "ArcHealthCheckIdStandby": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Name": {
     "Fn::Sub": "ArcHealthCheckIdStandby${Env}"
    },
    "Type": "String",
    "Value": {
     "Ref": "ArcHealthCheckStandby"
    }
   }
  },
  "ArcClusterSecret": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "ARC Cluster ARN",
    "KmsKeyId": {
     "Ref": "KmsKey"
    },
    "Name": {
     "Fn::Sub": "ArcClusterSecret${Env}"
    },
    "ReplicaRegions": [
     {
      "Region": {
       "Ref": "StandbyRegion"
      }
     }
    ],
    "SecretString": {
     "Ref": "ArcCluster"
    }
   }
  },
  "LambdaExecutionRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Resource": {
          "Fn::Sub": "arn:aws:logs:*:${AWS::AccountId}:*"
         }
        },
        {
         "Effect": "Allow",
         "Action": [
          "route53-recovery-cluster:GetRoutingControlState",
          "route53-recovery-cluster:ListRoutingControls",
          "route53-recovery-cluster:UpdateRoutingControlState",
          "route53-recovery-cluster:UpdateRoutingControlStates",
          "route53-recovery-control-config:DescribeCluster",
          "route53-recovery-control-config:DescribeControlPanel",
          "route53-recovery-control-config:DescribeRoutingControl",
          "route53-recovery-control-config:UpdateControlPanel",
          "route53-recovery-control-config:UpdateRoutingControl"
         ],
         "Resource": [
          {
           "Fn::Sub": "arn:aws:route53-recovery-control::${AWS::AccountId}:cluster/*"
          },
          {
           "Fn::Sub": "arn:aws:route53-recovery-control::${AWS::AccountId}:controlpanel/*"
          }
         ]
        },
        {
         "Effect": "Allow",
         "Action": [
          "secretsmanager:GetSecretValue",
          "secretsmanager:PutSecretValue",
          "secretsmanager:CreateSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:RemoveRegionsFromReplication",
          "secretsmanager:ReplicateSecretToRegions",
          "secretsmanager:ListSecrets"
         ],
         "Resource": {
          "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "root"
     }
    ]
   }
  },
  "EnableRoutingControlLambda": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import cfnresponse\nimport logging\nimport boto3\nimport os\nimport json\n# Init of the logging module\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\ndef lambda_handler(event, context):\n    print(event)\n    responseData = {}\n    replicaRegion = event['ResourceProperties']['replicaRegion']\n    arcClusterArn = event['ResourceProperties']['arcClusterArn']\n    arcRoutingControlArn = event['ResourceProperties']['arcRoutingControlArn']\n    arcClusterEndpointsSecret = event['ResourceProperties']['arcClusterEndpointsSecret']\n    try:\n      client = boto3.client('route53-recovery-control-config', region_name='us-west-2')\n      cluster = client.describe_cluster(ClusterArn=arcClusterArn)\n      endpoints = cluster['Cluster']['ClusterEndpoints']\n      regions = [\"us-east-1\", \"us-west-2\", \"eu-west-1\", \"ap-northeast-1\", \"ap-southeast-2\"]\n      sorted_endpoints = {}\n      for region in regions:\n          for endpoint in endpoints:\n              if endpoint[\"Region\"] == region:\n                  sorted_endpoints[region] = endpoint[\"Endpoint\"]\n      responseData['cluster_endpoints'] = json.dumps(sorted_endpoints)\n      client = boto3.client('secretsmanager', region_name=os.environ['AWS_REGION'])\n      try:\n        if (event['RequestType'] == 'Update'):\n          client.describe_secret(SecretId=arcClusterEndpointsSecret)\n          responseData['put_secret_value_response'] = client.put_secret_value(\n              SecretId=arcClusterEndpointsSecret,\n              SecretString=json.dumps(sorted_endpoints),\n          )\n          logging.info('Cluster Endpoints secret updated')\n        elif (event['RequestType'] == 'Create'):\n          responseData['create_secret_response'] = client.create_secret(\n            Description='ARC Cluster Endpoints',\n            Name=arcClusterEndpointsSecret,\n            SecretString=json.dumps(sorted_endpoints),\n            AddReplicaRegions=[{'Region': replicaRegion}]\n          )\n          logging.info('Cluster Endpoints secret created')\n        elif (event['RequestType'] == 'Delete'):\n          responseData['remove_replica_region_response'] = client.remove_regions_from_replication(\n            SecretId=arcClusterEndpointsSecret,\n            RemoveReplicaRegions=[\n                replicaRegion,\n            ]\n          )\n          responseData['delete_secret_response'] = client.delete_secret(\n            SecretId=arcClusterEndpointsSecret,\n            ForceDeleteWithoutRecovery=True\n          )\n          logging.info('Cluster Endpoints secret deleted')\n        else:\n          logging.error('Unsupported Stack Operation')\n      except Exception as err:\n        logging.error(err)\n        responseData['secret_operation_response'] = 'Failed'\n      updated_routing_control_state = \"NotUpdated\"\n      done = False\n      for region in regions:\n          for endpoint in endpoints:\n              if endpoint[\"Region\"] == region:\n  \n                  try:\n                      logging.info(\"route 53 recovery cluster endpoint: \" + endpoint[\"Endpoint\"])\n                      client = boto3.client('route53-recovery-cluster', region_name=region, endpoint_url=endpoint[\"Endpoint\"])\n  \n                      logging.info(\"toggling routing control\")\n                      routing_control_state = client.get_routing_control_state(RoutingControlArn=arcRoutingControlArn)\n                      logging.info(\"Current Routing Control State: \" + routing_control_state[\"RoutingControlState\"])\n                      if routing_control_state[\"RoutingControlState\"] == \"On\":\n                          logging.info(\"Routing Control State is ON\")\n                          done = True\n                          break\n                      else:\n                          client.update_routing_control_state(RoutingControlArn=arcRoutingControlArn, RoutingControlState=\"On\")\n                          routing_control_state = client.get_routing_control_state(RoutingControlArn=arcRoutingControlArn)\n                          updated_routing_control_state = routing_control_state[\"RoutingControlState\"]\n                          logging.info(\"Updated routing Control State is \" + updated_routing_control_state)\n                          done = True\n                          break\n                  except Exception as e:\n                      logging.error(e)\n          if done:\n              break\n      responseData['routing_control_state'] = updated_routing_control_state\n      responseData['message'] = 'Success'\n      logging.info('Sending %s to cloudformation', responseData['message'])\n      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)\n    except Exception as err:\n      responseData['message'] = 'Failed'\n      logging.error(err)\n      logging.info('Sending %s to cloudformation', responseData['message'])\n      cfnresponse.send(event, context, cfnresponse.FAILED, responseData)\n"
    },
    "Description": "Function to setup ARC Cluster endpoint secrets and rotate arc controls",
    "FunctionName": {
     "Fn::Sub": "ArcClusterManagementFunction${Env}"
    },
    "Handler": "index.lambda_handler",
    "Role": {
     "Fn::GetAtt": "LambdaExecutionRole.Arn"
    },
    "Runtime": "python3.9",
    "Timeout": 90
   }
  },
  "EnablePrimarySite": {
   "Type": "Custom::InvokeCustomLambda",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "EnableRoutingControlLambda.Arn"
    },
    "replicaRegion": {
     "Ref": "StandbyRegion"
    },
    "arcClusterArn": {
     "Ref": "ArcCluster"
    },
    "arcRoutingControlArn": {
     "Ref": "ArcRoutingControlPrimary"
    },
    "arcClusterEndpointsSecret": {
     "Fn::Sub": "ArcClusterEndpoints${Env}"
    }
   },
   "DependsOn": [
    "EnableRoutingControlLambda"
   ]
  },
  "EnableStandbySite": {
   "Type": "Custom::InvokeCustomLambda",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "EnableRoutingControlLambda.Arn"
    },
    "replicaRegion": {
     "Ref": "StandbyRegion"
    },
    "arcClusterArn": {
     "Ref": "ArcCluster"
    },
    "arcRoutingControlArn": {
     "Ref": "ArcRoutingControlStandby"
    },
    "arcClusterEndpointsSecret": {
     "Fn::Sub": "ArcClusterEndpoints${Env}"
    }
   },
   "DependsOn": [
    "EnableRoutingControlLambda"
   ]
  },
  "AutomationServiceRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ssm.amazonaws.com"
        ]
       },
       "Action": "sts:AssumeRole",
       "Condition": {
        "StringEquals": {
         "aws:SourceAccount": {
          "Fn::Sub": "${AWS::AccountId}"
         }
        },
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::Sub": "arn:aws:ssm:*:${AWS::AccountId}:automation-execution/*"
         }
        }
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
    ],
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "rds:FailoverGlobalCluster"
         ],
         "Resource": [
          {
           "Fn::Sub": "arn:aws:rds::${AWS::AccountId}:global-cluster:catalog-global-db-cluster${Env}"
          },
          {
           "Fn::Sub": "arn:aws:rds::${AWS::AccountId}:global-cluster:orders-global-db-cluster${Env}"
          },
          {
           "Fn::Sub": "{{resolve:secretsmanager:mr-app/orders-${StandbyRegion}-global-db-cluster${Env}}}"
          },
          {
           "Fn::Sub": "{{resolve:secretsmanager:mr-app/orders-${PrimaryRegion}-global-db-cluster${Env}}}"
          },
          {
           "Fn::Sub": "{{resolve:secretsmanager:mr-app/catalog-${StandbyRegion}-global-db-cluster${Env}}}"
          },
          {
           "Fn::Sub": "{{resolve:secretsmanager:mr-app/catalog-${PrimaryRegion}-global-db-cluster${Env}}}"
          }
         ]
        }
       ]
      },
      "PolicyName": "AuroraFailover"
     }
    ],
    "RoleName": {
     "Fn::Sub": "AutomationServiceRole${Env}"
    }
   }
  },
  "HostedZone": {
   "Type": "AWS::Route53::HostedZone",
   "Properties": {
    "Name": {
     "Fn::Sub": "${DomainName}"
    },
    "VPCs": [
     {
      "VPCId": {
       "Fn::Sub": "{{resolve:secretsmanager:VpcId-${PrimaryRegion}${Env}}}"
      },
      "VPCRegion": {
       "Ref": "PrimaryRegion"
      }
     },
     {
      "VPCId": {
       "Fn::Sub": "{{resolve:secretsmanager:VpcId-${StandbyRegion}${Env}}}"
      },
      "VPCRegion": {
       "Ref": "StandbyRegion"
      }
     }
    ]
   }
  },
  "PrimaryRegionRecord": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "AliasTarget": {
     "DNSName": {
      "Fn::Sub": "{{resolve:secretsmanager:Alb-${PrimaryRegion}${Env}:SecretString:DnsName}}"
     },
     "EvaluateTargetHealth": true,
     "HostedZoneId": {
      "Fn::Sub": "{{resolve:secretsmanager:Alb-${PrimaryRegion}${Env}:SecretString:HostedZoneId}}"
     }
    },
    "HealthCheckId": {
     "Ref": "ArcHealthCheckPrimary"
    },
    "HostedZoneId": {
     "Ref": "HostedZone"
    },
    "Name": {
     "Fn::Sub": "store.${DomainName}"
    },
    "Region": {
     "Ref": "PrimaryRegion"
    },
    "SetIdentifier": "PrimaryRegion",
    "Type": "A"
   }
  },
  "StandbyRegionRecord": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "AliasTarget": {
     "DNSName": {
      "Fn::Sub": "{{resolve:secretsmanager:Alb-${StandbyRegion}${Env}:SecretString:DnsName}}"
     },
     "EvaluateTargetHealth": true,
     "HostedZoneId": {
      "Fn::Sub": "{{resolve:secretsmanager:Alb-${StandbyRegion}${Env}:SecretString:HostedZoneId}}"
     }
    },
    "HealthCheckId": {
     "Ref": "ArcHealthCheckStandby"
    },
    "HostedZoneId": {
     "Ref": "HostedZone"
    },
    "Name": {
     "Fn::Sub": "store.${DomainName}"
    },
    "Region": {
     "Ref": "StandbyRegion"
    },
    "SetIdentifier": "StandbyRegion",
    "Type": "A"
   }
  },
  "DNSRecordSecret": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "Description": "Route53 DNS",
    "KmsKeyId": {
     "Ref": "KmsKey"
    },
    "Name": {
     "Fn::Sub": "DNSRecordSecret${Env}"
    },
    "ReplicaRegions": [
     {
      "Region": {
       "Ref": "StandbyRegion"
      }
     }
    ],
    "SecretString": {
     "Ref": "PrimaryRegionRecord"
    }
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VQwW7DIAz9lt0Ja7tN2j3StN2q5NZL5YLb0oItGWg1Rfn3QchlJ957tp+f2ent7l1vXuAZO2PvnXcnPY0JzF0Zz9meWQIkx3R0ZHy2qPsz/TSoCtyDQMCEoorDcRLOCT/eBA0/UH4NUxL2eiqdvc+x9lXY5D0Q+sqHMuXossqzWl2WsW8En679FUuiSrmY2APTsn0oe8SOmGYV0QimGIDgglJTjouiYgz6X1AHizCwR+UhnCxU+pXJ1Dvn5hs5i8E1rHWtQlzuv8XXx/ZTb8qn3aJznWRKLqAe2vsHNdjgWlEBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "CdkNagScanStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}