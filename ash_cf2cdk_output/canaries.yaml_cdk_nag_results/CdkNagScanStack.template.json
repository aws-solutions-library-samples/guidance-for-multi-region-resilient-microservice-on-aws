{
 "Description": "Canaries",
 "AWSTemplateFormatVersion": "2010-09-09",
 "Parameters": {
  "Env": {
   "Type": "String",
   "Default": "",
   "Description": "String to enable multiple deployments per AWS region"
  },
  "RemoteRegion": {
   "Type": "String",
   "Description": "The alternate AWS Region...not this one that the stack is in"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Resources": {
  "localSyntheticsCanaryHome": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:Alb-${AWS::Region}${Env}:SecretString:DnsName}}/home\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "lcl-rgnl-home${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "localSyntheticsCanaryCart": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:Alb-${AWS::Region}${Env}:SecretString:DnsName}}/cart\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "lcl-rgnl-cart${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "localSyntheticsCanaryCatalog": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:Alb-${AWS::Region}${Env}:SecretString:DnsName}}/catalog\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "lcl-rgnl-catalog${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "localSyntheticsCanaryOrders": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:Alb-${AWS::Region}${Env}:SecretString:DnsName}}/orders\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "lcl-rgnl-orders${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "remoteSyntheticsCanaryHome": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:Alb-${RemoteRegion}${Env}:SecretString:DnsName}}/home\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "rmt-rgnl-home${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "remoteSyntheticsCanaryCart": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:Alb-${RemoteRegion}${Env}:SecretString:DnsName}}/cart\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "rmt-rgnl-cart${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "remoteSyntheticsCanaryCatalog": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:Alb-${RemoteRegion}${Env}:SecretString:DnsName}}/catalog\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "rmt-rgnl-catalog${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "remoteSyntheticsCanaryOrders": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:Alb-${RemoteRegion}${Env}:SecretString:DnsName}}/orders\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "rmt-rgnl-orders${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "globalSyntheticsCanaryHome": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:DNSRecordSecret${Env}}}/home\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "global-home${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "globalSyntheticsCanaryCart": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:Alb-${RemoteRegion}${Env}:SecretString:DnsName}}/cart\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "global-cart${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:DNSRecordSecret${Env}}}"
     }
    }
   }
  },
  "globalSyntheticsCanaryCatalog": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:DNSRecordSecret${Env}}}/catalog\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "global-catalog${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "globalSyntheticsCanaryOrders": {
   "Type": "AWS::Synthetics::Canary",
   "Properties": {
    "ArtifactS3Location": {
     "Fn::Sub": "s3://{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "Code": {
     "Handler": "pageLoadBlueprint.handler",
     "Script": {
      "Fn::Sub": "import json\nimport http.client\nfrom selenium.webdriver.common.by import By\nimport urllib.parse\nfrom aws_synthetics.selenium import synthetics_webdriver as syn_webdriver\nfrom aws_synthetics.common import synthetics_logger as logger\n\ndef verify_request(method, url, post_data=None, headers={}):\n    parsed_url = urllib.parse.urlparse(url)\n    user_agent = str(syn_webdriver.get_canary_user_agent_string())\n    if \"User-Agent\" in headers:\n        headers[\"User-Agent\"] = f\"{user_agent} {headers['User-Agent']}\"\n    else:\n        headers[\"User-Agent\"] = user_agent\n    logger.info(f\"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}\")\n    if parsed_url.scheme == \"https\":\n        conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n    else:\n        conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)\n    conn.request(method, url, post_data, headers)\n    response = conn.getresponse()\n    logger.info(f\"Status Code: {response.status}\")\n    logger.info(f\"Response Headers: {json.dumps(response.headers.as_string())}\")\n\n    if not response.status or response.status < 200 or response.status > 299:\n        try:\n            logger.error(f\"Response: {response.read().decode()}\")\n        finally:\n            if response.reason:\n                conn.close()\n                raise Exception(f\"Failed: {response.reason}\")\n            else:\n                conn.close()\n                raise Exception(f\"Failed with status code: {response.status}\")\n    logger.info(f\"Response: {response.read().decode()}\")\n    logger.info(\"HTTP request successfully executed.\")\n    conn.close()\ndef main():\n    url1 = \"http://{{resolve:secretsmanager:DNSRecordSecret${Env}}}/orders\"\n    method1 = 'GET'\n    postData1 = \"\"\n    headers1 = {}\n    verify_request(method1, url1, None, headers1)\n    logger.info(\"Canary successfully executed.\")\ndef handler(event, context):\n    logger.info(\"Selenium Python API canary.\")\n    main()\n"
     }
    },
    "ExecutionRoleArn": {
     "Fn::Sub": "{{resolve:ssm:canaryRoleArn${Env}}}"
    },
    "FailureRetentionPeriod": 1,
    "Name": {
     "Fn::Sub": "global-orders${Env}"
    },
    "RunConfig": {
     "TimeoutInSeconds": 20
    },
    "RuntimeVersion": "syn-python-selenium-2.0",
    "Schedule": {
     "DurationInSeconds": "0",
     "Expression": "rate(1 minute)"
    },
    "StartCanaryAfterCreation": true,
    "SuccessRetentionPeriod": 1,
    "VPCConfig": {
     "SecurityGroupIds": [
      {
       "Fn::Sub": "{{resolve:ssm:canarySgId${Env}}}"
      }
     ],
     "SubnetIds": [
      {
       "Fn::Sub": "{{resolve:ssm:Subnet1${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet2${Env}}}"
      },
      {
       "Fn::Sub": "{{resolve:ssm:Subnet3${Env}}}"
      }
     ],
     "VpcId": {
      "Fn::Sub": "{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}"
     }
    }
   }
  },
  "CleanerLambdaExecutionRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Action": "sts:AssumeRole",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "Description": "Role used to run Cleaner lambda function on stack deletion",
    "Policies": [
     {
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Resource": {
          "Fn::Sub": "arn:aws:logs:*:${AWS::AccountId}:*"
         }
        },
        {
         "Effect": "Allow",
         "Action": [
          "lambda:DeleteFunction",
          "s3:DeleteObject",
          "logs:DeleteLogGroup",
          "cloudwatch:DeleteAlarms"
         ],
         "Resource": [
          {
           "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cwsyn-*"
          },
          {
           "Fn::Sub": "{{resolve:ssm:canaryBucketArn${Env}}}/*"
          },
          {
           "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cwsyn-*"
          },
          {
           "Fn::Sub": "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:Synthetics-Alarm-*"
          }
         ]
        },
        {
         "Effect": "Allow",
         "Action": [
          "s3:ListBucket"
         ],
         "Resource": [
          {
           "Fn::Sub": "{{resolve:ssm:canaryBucketArn${Env}}}"
          }
         ]
        },
        {
         "Effect": "Allow",
         "Action": [
          "synthetics:Get*",
          "cloudwatch:DescribeAlarms"
         ],
         "Resource": [
          {
           "Fn::Sub": "arn:aws:synthetics:${AWS::Region}:${AWS::AccountId}:canary:*"
          },
          {
           "Fn::Sub": "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*"
          }
         ]
        }
       ]
      },
      "PolicyName": "CleanerLambdaCFNRoleLabPermissions"
     }
    ]
   }
  },
  "CleanCanaryStackLambda": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import json\nimport boto3\nimport cfnresponse\n\n#Initialize boto3 clients for synthetics,lambda, CloudWatch logs,cloudwatch and s3\nsynthetics = boto3.client('synthetics')\nlambdaClient = boto3.client('lambda')\nlogs = boto3.client('logs')\ncloudwatch = boto3.client('cloudwatch')\ns3 = boto3.resource('s3')\n\n\ndef lambda_handler(event, context):\n  try:\n      bucketName = event['ResourceProperties']['BucketName']\n      CanaryName = event['ResourceProperties']['CanaryName']\n      Errors=[]\n      if event['RequestType'] == 'Delete':\n\n        try:\n          print('Finding Lambada name corresponding to your Canary name...')\n          Canarydetails = synthetics.get_canary(Name=CanaryName)\n          CanaryLambdaName = Canarydetails['Canary']['EngineArn'].split(':')[-2]\n          CanaryArtifactBucket = Canarydetails['Canary']['ArtifactS3Location']\n        except Exception as e:\n          print('Get-Canary failed: '+str(e))\n          Errors.append('Get-Canary failed: '+str(e))\n          pass\n        try:\n          print('delete Canary Lambda: ' + CanaryLambdaName)\n          lambdaClient.delete_function(FunctionName=CanaryLambdaName)\n        except Exception as e:\n          print('Deleting Canary Lambda failed: '+str(e))\n          Errors.append('Deleting Canary Lambda failed: '+str(e))\n          pass\n        try:\n          CanaryLogGroup='/aws/lambda/'+CanaryLambdaName\n          print('delete Canary log group: ' + CanaryLogGroup)\n          logs.delete_log_group(logGroupName=CanaryLogGroup)\n        except Exception as e:\n          print('Deleting Canary logs failed: '+str(e))\n          Errors.append('Deleting Canary logs failed: '+str(e))\n          pass\n\n        # Delete Alarms\n        try:\n          # retrun all alarms metricAlarm and Composite Alarms with prefix 'Synthetics-Alarm-CanaryName'\n          Alarms = cloudwatch.describe_alarms(AlarmNamePrefix='Synthetics-Alarm-'+CanaryName,AlarmTypes=['MetricAlarm'])\n\n          # Create list of all metricAlarms as deleteAlarms API can delete up to 100 alarm in one API\n          metricAlarms=[]\n          for alarm in Alarms['MetricAlarms']:\n            metricAlarms.append(alarm['AlarmName'])\n          if metricAlarms:\n            print('delete alarm: ' + metricAlarms)\n            cloudwatch.delete_alarms(AlarmNames=metricAlarms)\n        except Exception as e:\n          print('Deleting Canary Alarm failed: '+str(e))\n          Errors.append('Deleting Canary Alarm failed: '+str(e))\n\n      #IF any of dependency resources was not deleted raise exception to send custom error message to stack\n      if Errors:\n        raise Exception(Errors)\n      cfnresponse.send(event, context, cfnresponse.SUCCESS,json.loads(\"{}\"),None,False,'Reason: Stack cleaned successfully')\n\n  except Exception as e:\n      print(e)\n      cfnresponse.send(event, context, cfnresponse.FAILED,json.loads(\"{}\"),None,False,'Reason: ' + str(e))\n"
    },
    "FunctionName": {
     "Fn::Sub": "CleanCanaryResources-${AWS::StackName}"
    },
    "Handler": "index.lambda_handler",
    "Role": {
     "Fn::GetAtt": "CleanerLambdaExecutionRole.Arn"
    },
    "Runtime": "python3.8",
    "Timeout": 900
   }
  },
  "cleanupHomeCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "localSyntheticsCanaryHome"
    }
   }
  },
  "cleanupCatalogCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "localSyntheticsCanaryCatalog"
    }
   }
  },
  "cleanupCartCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "localSyntheticsCanaryCart"
    }
   }
  },
  "cleanupOrdersCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "localSyntheticsCanaryOrders"
    }
   }
  },
  "cleanupRemoteHomeCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "remoteSyntheticsCanaryHome"
    }
   }
  },
  "cleanupRemoteCatalogCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "remoteSyntheticsCanaryCatalog"
    }
   }
  },
  "cleanupRemoteCartCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "remoteSyntheticsCanaryCart"
    }
   }
  },
  "cleanupRemoteOrdersCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "remoteSyntheticsCanaryOrders"
    }
   }
  },
  "cleanupGlobalHomeCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "globalSyntheticsCanaryHome"
    }
   }
  },
  "cleanupGlobalCatalogCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "globalSyntheticsCanaryCatalog"
    }
   }
  },
  "cleanupGlobalCartCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "globalSyntheticsCanaryCart"
    }
   }
  },
  "cleanupGlobalOrdersCanaryStackOnDelete": {
   "Type": "Custom::cleanCanaryStack",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "CleanCanaryStackLambda.Arn"
    },
    "BucketName": {
     "Fn::Sub": "{{resolve:ssm:canaryBucketName${Env}}}"
    },
    "CanaryName": {
     "Ref": "globalSyntheticsCanaryOrders"
    }
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/yWOzQrCMBCEn8V7GtviwXtA8Cb1Aco22eK2yQbyo5Tiu5vY08wwy7fTy66/yPYEn9hoszaWJrk/E+hVaOuzmX1wkMjzSKxtNijVzPfDimIfEMBhwiAKYdzjxumFiXSsdwoYwiYIXE2DtygsuMlAjbfMuoK/FTNg9DnoP1J5NnQ07MvDJZ7f3VW2ZeUSiZqQOZFDORz6A9I1on/CAAAA"
   },
   "Metadata": {
    "aws:cdk:path": "CdkNagScanStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}