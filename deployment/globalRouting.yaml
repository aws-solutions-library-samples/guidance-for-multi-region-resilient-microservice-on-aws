AWSTemplateFormatVersion: "2010-09-09"
Description: 'Global Routing - Stack needs to be managed from US-West-2'

Parameters:
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region
  PrimaryRegion:
    Type: String
    Description: Enter the Primary Region
    Default: "us-east-1"
  StandbyRegion:
    Type: String
    Description: Enter the Standby Region
    Default: "us-west-2"
  DomainName:
    Type: String
    Description: The name of the domain that you want created as a private hosted zone in Route53
  KmsKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: KmsKey
    Description: CMK Id


Resources:
  ##### Application Recovery Controller#######
  ArcCluster:
    Type: AWS::Route53RecoveryControl::Cluster
    Properties:
      Name: !Sub retail-store-ar-ArcCluster${Env}
  ArcControlPanel:
    Type: AWS::Route53RecoveryControl::ControlPanel
    Properties:
      ClusterArn: !GetAtt ArcCluster.ClusterArn
      Name: !Sub retail-store-ar-ArcControlPanel${Env}
  ArcRoutingControlPrimary:
    Type: AWS::Route53RecoveryControl::RoutingControl
    Properties:
      ClusterArn: !GetAtt ArcCluster.ClusterArn
      ControlPanelArn: !GetAtt ArcControlPanel.ControlPanelArn
      Name: !Sub retail-store-ar-ArcRoutingControlPrimary${Env}
  ArcRoutingControlStandby:
    Type: AWS::Route53RecoveryControl::RoutingControl
    Properties:
      ClusterArn: !GetAtt ArcCluster.ClusterArn
      ControlPanelArn: !GetAtt ArcControlPanel.ControlPanelArn
      Name: !Sub retail-store-ar-ArcRoutingControlStandby${Env}
  
  ArcHealthCheckPrimary:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: RECOVERY_CONTROL
        RoutingControlArn: !GetAtt ArcRoutingControlPrimary.RoutingControlArn
      HealthCheckTags:
        - Key: Name
          Value: !Sub retail-store-ar-ArcHealthCheckPrimary${Env}
  ArcHealthCheckStandby:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: RECOVERY_CONTROL
        RoutingControlArn: !GetAtt ArcRoutingControlStandby.RoutingControlArn
      HealthCheckTags:
        - Key: Name
          Value: !Sub retail-store-ar-ArcHealthCheckStandby${Env}

  ArcRoutingControlPrimarySecret:
    Type: AWS::SecretsManager::Secret
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: AwsSolutions-SMG4
            reason: "This secret stores a routing control ARN which is static and does not require rotation."
    Properties:
      Name: !Sub ArcRoutingControlPrimarySecret${Env}
      Description: "ARC Routing Control ARN"
      KmsKeyId: !Ref KmsKey
      SecretString: !Ref ArcRoutingControlPrimary
      ReplicaRegions:
        - Region: !Ref StandbyRegion
  ArcHealthCheckIdPrimary:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub ArcHealthCheckIdPrimary${Env}
      Value: !Ref ArcHealthCheckPrimary

  ArcRoutingControlStandbySecret:
    Type: AWS::SecretsManager::Secret
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: AwsSolutions-SMG4
            reason: "This secret stores a routing control ARN which is static and does not require rotation."
    Properties:
      Name: !Sub ArcRoutingControlStandbySecret${Env}
      Description: "ARC Routing Control ARN"
      KmsKeyId: !Ref KmsKey
      SecretString: !Ref ArcRoutingControlStandby
      ReplicaRegions:
        - Region: !Ref StandbyRegion
  ArcHealthCheckIdStandby:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub ArcHealthCheckIdStandby${Env}
      Value: !Ref ArcHealthCheckStandby

  ArcClusterSecret:
    Type: AWS::SecretsManager::Secret
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: AwsSolutions-SMG4
            reason: "This secret stores a ARC cluster ARN which is static and does not require rotation."
    Properties:
      Name: !Sub ArcClusterSecret${Env}
      Description: "ARC Cluster ARN"
      KmsKeyId: !Ref KmsKey
      SecretString: !Ref ArcCluster
      ReplicaRegions:
        - Region: !Ref StandbyRegion

  LambdaExecutionRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM5
            reason: "The Lambda function requires broad permissions to interact with CloudWatch Logs."
            appliesTo:
              - "Resource::arn:aws:logs:*:<AWS::AccountId>:*"
          - id: AwsSolutions-IAM5
            reason: "Broad permissions for Route53 Recovery Control are required for operational tasks."
            appliesTo:
              - "Resource::arn:aws:route53-recovery-control::<AWS::AccountId>:cluster/*"
              - "Resource::arn:aws:route53-recovery-control::<AWS::AccountId>:controlpanel/*"
          - id: AwsSolutions-IAM5
            reason: "Broad permissions for Secrets Manager are required to manage secrets."
            appliesTo:
              - "Resource::arn:aws:secretsmanager:<AWS::Region>:<AWS::AccountId>:secret:*"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - "route53-recovery-cluster:GetRoutingControlState"
                  - "route53-recovery-cluster:ListRoutingControls"
                  - "route53-recovery-cluster:UpdateRoutingControlState"
                  - "route53-recovery-cluster:UpdateRoutingControlStates"
                  - "route53-recovery-control-config:DescribeCluster"
                  - "route53-recovery-control-config:DescribeControlPanel"
                  - "route53-recovery-control-config:DescribeRoutingControl"
                  - "route53-recovery-control-config:UpdateControlPanel"
                  - "route53-recovery-control-config:UpdateRoutingControl"
                Resource:
                  - !Sub 'arn:aws:route53-recovery-control::${AWS::AccountId}:cluster/*'
                  - !Sub 'arn:aws:route53-recovery-control::${AWS::AccountId}:controlpanel/*'
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                  - "secretsmanager:CreateSecret"
                  - "secretsmanager:UpdateSecret"
                  - "secretsmanager:DeleteSecret"
                  - "secretsmanager:RemoveRegionsFromReplication"
                  - "secretsmanager:ReplicateSecretToRegions"
                  - "secretsmanager:ListSecrets"
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
            Version: "2012-10-17"
          PolicyName: root
    Type: "AWS::IAM::Role"
  EnableRoutingControlLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ArcClusterManagementFunction${Env}
      Runtime: python3.13
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 90
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import boto3
          import os
          import json
          # Init of the logging module
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
          
          def lambda_handler(event, context):
              print(event)
              responseData = {}
              replicaRegion = event['ResourceProperties']['replicaRegion']
              arcClusterArn = event['ResourceProperties']['arcClusterArn']
              arcRoutingControlArn = event['ResourceProperties']['arcRoutingControlArn']
              arcClusterEndpointsSecret = event['ResourceProperties']['arcClusterEndpointsSecret']
              try:
                client = boto3.client('route53-recovery-control-config', region_name='us-west-2')
                cluster = client.describe_cluster(ClusterArn=arcClusterArn)
                endpoints = cluster['Cluster']['ClusterEndpoints']
                regions = ["us-east-1", "us-west-2", "eu-west-1", "ap-northeast-1", "ap-southeast-2"]
                sorted_endpoints = {}
                for region in regions:
                    for endpoint in endpoints:
                        if endpoint["Region"] == region:
                            sorted_endpoints[region] = endpoint["Endpoint"]
                responseData['cluster_endpoints'] = json.dumps(sorted_endpoints)
                client = boto3.client('secretsmanager', region_name=os.environ['AWS_REGION'])
                try:
                  if (event['RequestType'] == 'Update'):
                    client.describe_secret(SecretId=arcClusterEndpointsSecret)
                    responseData['put_secret_value_response'] = client.put_secret_value(
                        SecretId=arcClusterEndpointsSecret,
                        SecretString=json.dumps(sorted_endpoints),
                    )
                    logging.info('Cluster Endpoints secret updated')
                  elif (event['RequestType'] == 'Create'):
                    responseData['create_secret_response'] = client.create_secret(
                      Description='ARC Cluster Endpoints',
                      Name=arcClusterEndpointsSecret,
                      SecretString=json.dumps(sorted_endpoints),
                      AddReplicaRegions=[{'Region': replicaRegion}]
                    )
                    logging.info('Cluster Endpoints secret created')
                  elif (event['RequestType'] == 'Delete'):
                    responseData['remove_replica_region_response'] = client.remove_regions_from_replication(
                      SecretId=arcClusterEndpointsSecret,
                      RemoveReplicaRegions=[
                          replicaRegion,
                      ]
                    )
                    responseData['delete_secret_response'] = client.delete_secret(
                      SecretId=arcClusterEndpointsSecret,
                      ForceDeleteWithoutRecovery=True
                    )
                    logging.info('Cluster Endpoints secret deleted')
                  else:
                    logging.error('Unsupported Stack Operation')
                except Exception as err:
                  logging.error(err)
                  responseData['secret_operation_response'] = 'Failed'
                updated_routing_control_state = "NotUpdated"
                done = False
                for region in regions:
                    for endpoint in endpoints:
                        if endpoint["Region"] == region:
            
                            try:
                                logging.info("route 53 recovery cluster endpoint: " + endpoint["Endpoint"])
                                client = boto3.client('route53-recovery-cluster', region_name=region, endpoint_url=endpoint["Endpoint"])
            
                                logging.info("toggling routing control")
                                routing_control_state = client.get_routing_control_state(RoutingControlArn=arcRoutingControlArn)
                                logging.info("Current Routing Control State: " + routing_control_state["RoutingControlState"])
                                if routing_control_state["RoutingControlState"] == "On":
                                    logging.info("Routing Control State is ON")
                                    done = True
                                    break
                                else:
                                    client.update_routing_control_state(RoutingControlArn=arcRoutingControlArn, RoutingControlState="On")
                                    routing_control_state = client.get_routing_control_state(RoutingControlArn=arcRoutingControlArn)
                                    updated_routing_control_state = routing_control_state["RoutingControlState"]
                                    logging.info("Updated routing Control State is " + updated_routing_control_state)
                                    done = True
                                    break
                            except Exception as e:
                                logging.error(e)
                    if done:
                        break
                responseData['routing_control_state'] = updated_routing_control_state
                responseData['message'] = 'Success'
                logging.info('Sending %s to cloudformation', responseData['message'])
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as err:
                responseData['message'] = 'Failed'
                logging.error(err)
                logging.info('Sending %s to cloudformation', responseData['message'])
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
      Description: Function to setup ARC Cluster endpoint secrets and rotate arc controls

  EnablePrimarySite:
    DependsOn: EnableRoutingControlLambda
    Type: Custom::InvokeCustomLambda
    Properties:
      ServiceToken: !GetAtt EnableRoutingControlLambda.Arn
      replicaRegion: !Ref StandbyRegion
      arcClusterArn: !Ref ArcCluster
      arcRoutingControlArn: !Ref ArcRoutingControlPrimary
      arcClusterEndpointsSecret: !Sub ArcClusterEndpoints${Env}
  EnableStandbySite:
    DependsOn: EnableRoutingControlLambda
    Type: Custom::InvokeCustomLambda
    Properties:
      ServiceToken: !GetAtt EnableRoutingControlLambda.Arn
      replicaRegion: !Ref StandbyRegion
      arcClusterArn: !Ref ArcCluster
      arcRoutingControlArn: !Ref ArcRoutingControlStandby
      arcClusterEndpointsSecret: !Sub ArcClusterEndpoints${Env}

  ##### Regional Failover Automation Role #######
  AutomationServiceRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM4
            reason: "Using the AWS managed policy AmazonSSMAutomationRole to reduce management overhead; its broad permissions are acceptable for this automation use case."
            appliesTo:
              - "Policy::arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              aws:SourceAccount: !Sub ${AWS::AccountId}
            ArnLike:
              aws:SourceArn: !Sub arn:aws:ssm:*:${AWS::AccountId}:automation-execution/*
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Path: "/"
      RoleName: !Sub AutomationServiceRole${Env}
      Policies:
        -
          PolicyName: AuroraFailover
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - "rds:FailoverGlobalCluster"
                Resource: 
                  - !Sub 'arn:aws:rds::${AWS::AccountId}:global-cluster:catalog-global-db-cluster${Env}'
                  - !Sub 'arn:aws:rds::${AWS::AccountId}:global-cluster:orders-global-db-cluster${Env}'
                  - !Sub '{{resolve:secretsmanager:mr-app/orders-${StandbyRegion}-global-db-cluster${Env}}}'
                  - !Sub '{{resolve:secretsmanager:mr-app/orders-${PrimaryRegion}-global-db-cluster${Env}}}'
                  - !Sub '{{resolve:secretsmanager:mr-app/catalog-${StandbyRegion}-global-db-cluster${Env}}}'
                  - !Sub '{{resolve:secretsmanager:mr-app/catalog-${PrimaryRegion}-global-db-cluster${Env}}}'
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub ${DomainName}
      VPCs:
        - VPCId: !Sub '{{resolve:secretsmanager:VpcId-${PrimaryRegion}${Env}}}'
          VPCRegion: !Ref PrimaryRegion
        - VPCId: !Sub '{{resolve:secretsmanager:VpcId-${StandbyRegion}${Env}}}'
          VPCRegion: !Ref StandbyRegion
  PrimaryRegionRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub store.${DomainName}
      Region: !Ref PrimaryRegion
      HealthCheckId: !Ref ArcHealthCheckPrimary
      Type: A
      SetIdentifier: PrimaryRegion
      AliasTarget:
        DNSName: !Sub '{{resolve:secretsmanager:Alb-${PrimaryRegion}${Env}:SecretString:DnsName}}'
        EvaluateTargetHealth: true
        HostedZoneId: !Sub '{{resolve:secretsmanager:Alb-${PrimaryRegion}${Env}:SecretString:HostedZoneId}}'
  StandbyRegionRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub store.${DomainName}
      Region: !Ref StandbyRegion
      HealthCheckId: !Ref ArcHealthCheckStandby
      Type: A
      SetIdentifier: StandbyRegion
      AliasTarget:
        DNSName: !Sub '{{resolve:secretsmanager:Alb-${StandbyRegion}${Env}:SecretString:DnsName}}'
        EvaluateTargetHealth: true
        HostedZoneId: !Sub '{{resolve:secretsmanager:Alb-${StandbyRegion}${Env}:SecretString:HostedZoneId}}'

  DNSRecordSecret:
    Type: AWS::SecretsManager::Secret
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: AwsSolutions-SMG4
            reason: "This secret stores a static DNS record value that does not require automatic rotation."
    Properties:
      Name: !Sub DNSRecordSecret${Env}
      Description: "Route53 DNS"
      KmsKeyId: !Ref KmsKey
      SecretString: !Ref PrimaryRegionRecord
      ReplicaRegions:
        - Region: !Ref StandbyRegion