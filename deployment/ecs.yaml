AWSTemplateFormatVersion: "2010-09-09"
Description: "Applications"

Parameters:
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region
  PrimaryRegion:
    Type: String
    Description: Enter the Primary Region
    Default: "us-east-1"
  StandbyRegion:
    Type: String
    Description: Enter the Standby Region
    Default: "us-west-2"
  Tag:
    Type: String
    Description: Docker image tag

Conditions:
  isPrimary: !Equals
    - !Ref AWS::Region
    - us-east-1
  isStandby: !Equals
    - !Ref AWS::Region
    - us-west-2

Resources:
  #Backends
  OrdersMqBroker:
    Type: "AWS::AmazonMQ::Broker"
    Properties:
      AutoMinorVersionUpgrade: false
      BrokerName: !Sub "retail-store-arordersmq-broker${Env}"
      DeploymentMode: "SINGLE_INSTANCE"
      EngineType: "RabbitMQ"
      EngineVersion: "3.10.10"
      HostInstanceType: "mq.t3.micro"
      PubliclyAccessible: false
      StorageType: "ebs"
      AuthenticationStrategy: "simple"
      MaintenanceWindowStartTime: 
          DayOfWeek: "SUNDAY"
          TimeOfDay: "03:00"
          TimeZone: "UTC"
      Logs: 
          General: true
      SecurityGroups: 
        - !Ref sgMq
      SubnetIds: 
        - !Sub '{{resolve:ssm:Subnet1${Env}}}'
      Tags: 
        - 
          Key: "environment-name"
          Value: "retail-store-ar"
        - 
          Key: "created-by"
          Value: "retail-store-sample-app"
        - 
          Key: "Name"
          Value: "retail-store-arordersmq-broker"
      EncryptionOptions: 
          UseAwsOwnedKey: true
      Users:
        - 
          Username: mq
          Password: !Sub '{{resolve:secretsmanager:${MqPassword}}}'

  CheckoutEcCluster:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      CacheNodeType: "cache.t3.micro"
      Engine: "redis"
      EngineVersion: "4.0.10"
      NumCacheNodes: 1
      PreferredMaintenanceWindow: "wed:03:00-wed:04:00"
      CacheParameterGroupName: !Ref CheckoutEcParameterGroup
      CacheSubnetGroupName: !Ref CheckoutEcSubnetGroup
      AutoMinorVersionUpgrade: true
      VpcSecurityGroupIds: 
        - !Ref sgRedis
      SnapshotRetentionLimit: 0
      SnapshotWindow: "06:30-07:30"
      Tags: 
        - 
          Key: "environment-name"
          Value: "retail-store-ar"
        - 
          Key: "created-by"
          Value: "retail-store-sample-app"
        - 
          Key: "Name"
          Value: "retail-store-ar-checkout"
  CheckoutEcSubnetGroup:
      Type: "AWS::ElastiCache::SubnetGroup"
      Properties:
        Description: "Elasticache subnet group for retail-store-ar-checkout"
        SubnetIds: 
          - !Sub '{{resolve:ssm:Subnet1${Env}}}'
          - !Sub '{{resolve:ssm:Subnet2${Env}}}'
          - !Sub '{{resolve:ssm:Subnet3${Env}}}'
  CheckoutEcParameterGroup:
    Type: "AWS::ElastiCache::ParameterGroup"
    Properties:
      CacheParameterGroupFamily: "redis4.0"
      Description: "Elasticache parameter group for retail-store-ar-checkout"

  #Security Groups  
  sgTask:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      GroupDescription: ECS Task
      SecurityGroupIngress:
        -
          SourceSecurityGroupId: !Ref sgAlb
          IpProtocol: tcp
          FromPort: 8080
          ToPort:  8080
  sgTaskIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      SourceSecurityGroupId: !Ref sgTask
      IpProtocol: tcp
      FromPort: 8080
      ToPort:  8080
      GroupId: !GetAtt sgTask.GroupId
  sgAlb:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      GroupDescription: ECS Alb
      SecurityGroupIngress:
        #Public ALB
        CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort:  80
  sgOrdersDB:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Control traffic to/from RDS Aurora retail-store-ar-orders"
      Tags: 
        - 
          Key: "created-by"
          Value: "retail-store-sample-app"
        - 
          Key: "Name"
          Value: "retail-store-ar-orders-db"
        - 
          Key: "environment-name"
          Value: "retail-store-ar"
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      SecurityGroupIngress: 
        - 
          SourceSecurityGroupId: !Ref sgTask
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          Description: "From allowed SGs"
          FromPort: 3306
          IpProtocol: "tcp"
          ToPort: 3306
  sgMq:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "security group for MQ Broker"
      Tags: 
        - 
          Key: "environment-name"
          Value: "retail-store-ar"
        - 
          Key: "Name"
          Value: "retail-store-ar-orders-mq-broker"
        - 
          Key: "created-by"
          Value: "retail-store-sample-app"
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      SecurityGroupIngress: 
        - 
          SourceSecurityGroupId: !Ref sgTask
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          Description: "Allow all ports"
          FromPort: 0
          IpProtocol: "tcp"
          ToPort: 65535
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          Description: "Allow all egress"
          IpProtocol: "-1"
        - 
          CidrIpv6: "::/0"
          Description: "Allow all egress"
          IpProtocol: "-1"
  CatalogAuroraMySqlComputeSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref sgTask
      GroupId: !Sub '{{resolve:ssm:catalog-aurora-mysql-sg-${AWS::Region}${Env}}}'
  OrdersAuroraMySqlComputeSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref sgTask
      GroupId: !Sub '{{resolve:ssm:orders-aurora-mysql-sg-${AWS::Region}${Env}}}'
  sgRedis:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for Elasticache Redis"
      Tags: 
        - 
          Key: "environment-name"
          Value: "retail-store-ar"
        - 
          Key: "Name"
          Value: "retail-store-ar-checkout-redis"
        - 
          Key: "created-by"
          Value: "retail-store-sample-app"
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      SecurityGroupIngress: 
        - 
          SourceSecurityGroupId: !Ref sgTask
          SourceSecurityGroupOwnerId: !Ref AWS::AccountId
          Description: "Selectively allow inbound traffic"
          FromPort: 6379
          IpProtocol: "tcp"
          ToPort: 6379
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          Description: "Allow all egress"
          IpProtocol: "-1"
        - 
          CidrIpv6: "::/0"
          Description: "Allow all egress"
          IpProtocol: "-1"

  KmsKey:
    Type: "AWS::KMS::Key"
    Properties:
      Enabled: true
      Description: "retail-store-ar CMK"
      KeyUsage: "ENCRYPT_DECRYPT"
      KeyPolicy: !Sub |
          {
            "Version" : "2012-10-17",
            "Id" : "key-default-1",
            "Statement" : [ {
              "Sid" : "Enable IAM User Permissions",
              "Effect" : "Allow",
              "Principal" : {
                "AWS" : "arn:aws:iam::${AWS::AccountId}:root"
              },
              "Action" : "kms:*",
              "Resource" : "*"
            } ]
          }
      KeySpec: "SYMMETRIC_DEFAULT"
      MultiRegion: false
  
  #Secrets

  MqSecret:
    DependsOn: 
      - MqPassword 
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub 'retail-store-ar-mq${Env}'
      KmsKeyId: !Ref KmsKey
      SecretString: !Sub "{\"host\":\"amqp+ssl://${OrdersMqBroker}-1.mq.${AWS::Region}.amazonaws.com:5671\",\"password\":\"{{resolve:secretsmanager:retail-store-ar-mq-password${Env}}}\",\"username\":\"default_mq_user\"}"
  
  MqPassword:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub 'retail-store-ar-mq-password${Env}'
      KmsKeyId: !Ref KmsKey
      GenerateSecretString: 
        ExcludePunctuation: true

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 3

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref sgAlb
      Subnets:
        - !Sub '{{resolve:ssm:PubSubnet1${Env}}}'
        - !Sub '{{resolve:ssm:PubSubnet2${Env}}}'
        - !Sub '{{resolve:ssm:PubSubnet3${Env}}}'
      Type: application
  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckPath: '/actuator'
      Port: 8080
      Protocol: HTTP
      Matcher:
        HttpCode: '200,302,303'
      TargetType: ip
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ServiceConnectDefaults:
        Namespace: !Sub retail-store-ar${Env}
  
  #Carts Service
  CartsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ecs 
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                  - "logs:PutRetentionPolicy"
                  - "logs:PutLogEvents"
              - Effect: "Allow"
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:secretsmanager:cartsTable${Env}Secret}}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:secretsmanager:cartsTable${Env}Secret}}/*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:secretsmanager:cartsTable${Env}Secret}}/index'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:secretsmanager:cartsTable${Env}Secret}}/index/*'
                Action:
                  - "dynamodb:*"
  CartsTaskDefinition:
    Type:  AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref CartsTaskExecutionRole
      TaskRoleArn: !Ref CartsTaskExecutionRole
      NetworkMode: awsvpc 
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        -
          Name: "carts"
          PortMappings:
            - ContainerPort: 8080
              Name: carts
              AppProtocol: http
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/carts${Env}:${Tag}"
          Cpu: 0
          MemoryReservation: 50
          Essential: true
          Environment:
            - Name: CARTS_DYNAMODB_TABLENAME
              Value: !Sub '{{resolve:secretsmanager:cartsTable${Env}Secret}}'
            - Name: SPRING_PROFILES_ACTIVE
              Value: dynamodb
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs  
  CartsService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub carts${Env}
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Cluster:  !Ref EcsCluster
      DesiredCount: 3
      TaskDefinition: !Ref CartsTaskDefinition
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Sub retail-store-ar${Env}
        Services:
          -
            ClientAliases:
              -
                DnsName: carts
                Port: 8080
            PortName: carts
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !GetAtt sgTask.GroupId
          Subnets:
            - !Sub '{{resolve:ssm:Subnet1${Env}}}'
            - !Sub '{{resolve:ssm:Subnet2${Env}}}'
            - !Sub '{{resolve:ssm:Subnet3${Env}}}'

  #Orders Service
  OrdersTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ecs 
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                  - "logs:PutRetentionPolicy"
                  - "logs:PutLogEvents"
              - Effect: "Allow"
                Resource: 
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mr-app/*'
                  - !Ref MqSecret
                Action:
                  - "secretsmanager:GetSecretValue"
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKey}"
                Action: 
                  - "kms:Decrypt*"
              - Effect: "Allow"
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*'
                Action:
                  - "ssm:GetParameters"
  OrdersTaskDefinition:
    Type:  AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref OrdersTaskExecutionRole
      TaskRoleArn: !Ref OrdersTaskExecutionRole
      NetworkMode: awsvpc 
      Cpu: 1024
      Memory: 2048
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        -
          Name: "orders"
          PortMappings:
            - ContainerPort: 8080
              AppProtocol: http
              Name: orders
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/orders${Env}:${Tag}"
          Cpu: 0
          MemoryReservation: 50
          Essential: true
          Secrets:
            -
              Name: "SPRING_DATASOURCE_WRITER_URL"
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/orders-global-db-cluster-Hostname${Env}"
            -
              Name: "SPRING_DATASOURCE_READER_URL"
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/orders-global-db-cluster-Hostname${Env}"
            -
              Name: "SPRING_DATASOURCE_WRITER_USERNAME"
              ValueFrom: !Sub "{{resolve:ssm:orders-global-db-cluster-CredentialSecretArn${Env}}}:username::"
            -
              Name: "SPRING_DATASOURCE_READER_USERNAME"
              ValueFrom: !Sub "{{resolve:ssm:orders-global-db-cluster-CredentialSecretArn${Env}}}:username::"
            - 
              Name: "SPRING_RABBITMQ_USER"
              ValueFrom: !Sub "${MqSecret}:username::"
            -
              Name: "SPRING_RABBITMQ_ADDRESSES"
              ValueFrom: !Sub "${MqSecret}:host::"
            -
              Name: "SPRING_DATASOURCE_WRITER_PASSWORD"
              ValueFrom: !Sub "{{resolve:ssm:orders-global-db-cluster-CredentialSecretArn${Env}}}:password::"
            -
              Name: "SPRING_DATASOURCE_READER_PASSWORD"
              ValueFrom: !Sub "{{resolve:ssm:orders-global-db-cluster-CredentialSecretArn${Env}}}:password::"
            - 
              Name: "SPRING_RABBITMQ_PASSWORD"
              ValueFrom: !Sub "${MqSecret}:password::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs  
  OrdersService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub orders${Env}
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Cluster:  !Ref EcsCluster
      DesiredCount: 3
      TaskDefinition: !Ref OrdersTaskDefinition
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Sub retail-store-ar${Env}
        Services:
          -
            ClientAliases:
              -
                DnsName: orders
                Port: 8080
            PortName: orders
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !GetAtt sgTask.GroupId
          Subnets:
            - !Sub '{{resolve:ssm:Subnet1${Env}}}'
            - !Sub '{{resolve:ssm:Subnet2${Env}}}'
            - !Sub '{{resolve:ssm:Subnet3${Env}}}'

  #Assets Service
  AssetsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  AssetsTaskDefinition:
    Type:  AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref AssetsTaskExecutionRole
      TaskRoleArn: !Ref AssetsTaskExecutionRole
      NetworkMode: awsvpc 
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        -
          Name: "assets"
          PortMappings:
            - ContainerPort: 8080
              Name: assets
              AppProtocol: http
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/assets${Env}:${Tag}"
          Cpu: 0
          MemoryReservation: 50
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs  
  AssetsService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub assets${Env}
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Cluster:  !Ref EcsCluster
      DesiredCount: 3
      TaskDefinition: !Ref AssetsTaskDefinition
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Sub retail-store-ar${Env}
        Services:
          -
            ClientAliases:
              -
                DnsName: assets
                Port: 8080
            PortName: assets
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !GetAtt sgTask.GroupId
          Subnets:
            - !Sub '{{resolve:ssm:Subnet1${Env}}}'
            - !Sub '{{resolve:ssm:Subnet2${Env}}}'
            - !Sub '{{resolve:ssm:Subnet3${Env}}}'

  #Catalog Service
  CatalogTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ecs 
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                  - "logs:PutRetentionPolicy"
                  - "logs:PutLogEvents"
              - Effect: "Allow"
                Resource: 
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mr-app/*'
                Action:
                  - "secretsmanager:GetSecretValue"
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKey}"
                Action: 
                  - "kms:Decrypt*"
              - Effect: "Allow"
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*'
                Action:
                  - "ssm:GetParameters"
  CatalogTaskDefinition:
    Type:  AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref CatalogTaskExecutionRole
      TaskRoleArn: !Ref CatalogTaskExecutionRole
      NetworkMode: awsvpc 
      Cpu: 1024
      Memory: 2048
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        -
          Name: "catalog"
          PortMappings:
            - ContainerPort: 8080
              Name: catalog
              AppProtocol: http
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/catalog${Env}:${Tag}"
          Cpu: 0
          MemoryReservation: 50
          Essential: true
          Environment:
            - 
              Name: "DB_NAME"
              Value: "catalog"
          Secrets:
            -
              Name: "DB_ENDPOINT"
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/catalog-global-db-cluster-Hostname${Env}"
            -
              Name: "DB_READ_ENDPOINT"
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/catalog-global-db-cluster-Hostname${Env}"
            -
              Name: "DB_USER"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mr-app/catalog-global-db-cluster-UserCredentials${Env}:username::"
            -
              Name: "DB_PASSWORD"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mr-app/catalog-global-db-cluster-UserCredentials${Env}:password::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs  
  CatalogService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub catalog${Env}
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Cluster:  !Ref EcsCluster
      DesiredCount: 3
      TaskDefinition: !Ref CatalogTaskDefinition
      ServiceConnectConfiguration:
        Enabled: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: !Sub ${AWS::Region}
            awslogs-stream-prefix: ecs
        Namespace: !Sub retail-store-ar${Env}
        Services:
          -
            ClientAliases:
              -
                DnsName: catalog
                Port: 8080
            PortName: catalog
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !GetAtt sgTask.GroupId
          Subnets:
            - !Sub '{{resolve:ssm:Subnet1${Env}}}'
            - !Sub '{{resolve:ssm:Subnet2${Env}}}'
            - !Sub '{{resolve:ssm:Subnet3${Env}}}'

  #Checkout Service
  CheckoutTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  CheckoutTaskDefinition:
    Type:  AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref CheckoutTaskExecutionRole
      TaskRoleArn: !Ref CheckoutTaskExecutionRole
      NetworkMode: awsvpc 
      Cpu: 1024
      Memory: 2048
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        -
          Name: "checkout"
          PortMappings:
            - ContainerPort: 8080
              Name: checkout
              AppProtocol: http
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/checkout${Env}:${Tag}"
          Cpu: 0
          MemoryReservation: 50
          Essential: true
          Environment:
            - 
              Name: "ENDPOINTS_ORDERS"
              Value: http://orders:8080
            - 
              Name: "REDIS_URL"
              Value: !Sub "redis://${CheckoutEcCluster.RedisEndpoint.Address}:${CheckoutEcCluster.RedisEndpoint.Port}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs  
  CheckoutService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub checkout${Env}
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Cluster:  !Ref EcsCluster
      DesiredCount: 3
      TaskDefinition: !Ref CheckoutTaskDefinition
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Sub retail-store-ar${Env}
        Services:
          -
            ClientAliases:
              -
                DnsName: checkout
                Port: 8080
            PortName: checkout
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !GetAtt sgTask.GroupId
          Subnets:
            - !Sub '{{resolve:ssm:Subnet1${Env}}}'
            - !Sub '{{resolve:ssm:Subnet2${Env}}}'
            - !Sub '{{resolve:ssm:Subnet3${Env}}}'

  #UI Service
  UiTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  UiTaskDefinition:
    DependsOn:
      - CatalogService
    Type:  AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref UiTaskExecutionRole
      TaskRoleArn: !Ref UiTaskExecutionRole
      NetworkMode: awsvpc 
      Cpu: 1024
      Memory: 2048
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        -
          Name: "ui"
          PortMappings:
            - ContainerPort: 8080
              Name: ui
              AppProtocol: http
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ui${Env}:${Tag}"
          Cpu: 0
          MemoryReservation: 50
          Essential: true
          Environment:
            - 
              Name: "ENDPOINTS_CATALOG"
              Value: !Sub http://catalog:8080
            - 
              Name: "ENDPOINTS_CARTS"
              Value: !Sub http://carts:8080
            - 
              Name: "ENDPOINTS_CHECKOUT"
              Value: !Sub http://checkout:8080
            - 
              Name: "ENDPOINTS_ORDERS"
              Value: !Sub http://orders:8080
            - 
              Name: "ENDPOINTS_ASSETS"
              Value: !Sub http://assets:8080   
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs  
  UiService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ui${Env}
      LoadBalancers:
        - TargetGroupArn: !Ref AlbTargetGroup
          ContainerName: ui 
          ContainerPort: 8080
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Cluster:  !Ref EcsCluster
      DesiredCount: 3
      TaskDefinition: !Ref UiTaskDefinition
      ServiceConnectConfiguration:
        Enabled: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-region: !Sub ${AWS::Region}
            awslogs-stream-prefix: ecs  
        Namespace: !Sub retail-store-ar${Env}
        Services:
          -
            ClientAliases:
              -
                DnsName: ui
                Port: 8080
            PortName: ui
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !GetAtt sgTask.GroupId
          Subnets:
            - !Sub '{{resolve:ssm:Subnet1${Env}}}'
            - !Sub '{{resolve:ssm:Subnet2${Env}}}'
            - !Sub '{{resolve:ssm:Subnet3${Env}}}'

#Secrets
  AlbSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub Alb-${AWS::Region}${Env}
      Description: "Alb Info"
      KmsKeyId: "alias/aws/secretsmanager"
      SecretString: !Sub "{\"DnsName\":\"${Alb.DNSName}\",\"HostedZoneId\":\"${Alb.CanonicalHostedZoneID}\"}"
      ReplicaRegions:
        - Region: !If [isPrimary, us-west-2, us-east-1]