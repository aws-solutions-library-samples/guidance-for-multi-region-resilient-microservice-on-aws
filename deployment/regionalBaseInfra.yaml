AWSTemplateFormatVersion: "2010-09-09"
Description: 'Infrastructure'

Parameters:
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region
  NamingPrefix:
    Type: String
    Description: The prefix to be used for resources created by this template.
    Default: mr-app
  # EKSClusterVersion:
  #   Type: String
  #   Description: Tke Kubernetes version of the created EKS cluster
  #   Default: 1.27
  PrimaryRegion:
    Type: String
    Description: Enter the Primary Region
    Default: "us-east-1"
  StandbyRegion:
    Type: String
    Description: Enter the Standby Region
    Default: "us-west-2"

Mappings:
  RegionMap:
    us-east-1:
      "VPCCidrBlock": 10.1.0.0/16
      "PrivateCidrBlock1": 10.1.0.0/20
      "PrivateCidrBlock2": 10.1.16.0/20
      "PrivateCidrBlock3": 10.1.32.0/20
      "AvailabilityZoneId1": use1-az1
      "AvailabilityZoneId2": use1-az4
      "AvailabilityZoneId3": use1-az6
    us-west-2:
      "VPCCidrBlock": 10.2.0.0/16
      "PrivateCidrBlock1": 10.2.0.0/20
      "PrivateCidrBlock2": 10.2.16.0/20
      "PrivateCidrBlock3": 10.2.32.0/20
      "AvailabilityZoneId1": usw2-az1
      "AvailabilityZoneId2": usw2-az2
      "AvailabilityZoneId3": usw2-az3

Conditions:
  isPrimary: !Equals
    - !Ref AWS::Region
    - us-east-1
  isStandby: !Equals
    - !Ref AWS::Region
    - us-west-2

Resources:
  #VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", "VPCCidrBlock"]
      EnableDnsSupport: true
      EnableDnsHostnames: true
  FlowLogRole:
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action:
                - "sts:AssumeRole"
              Effect: Allow
              Principal:
                Service:
                  - vpc-flow-logs.amazonaws.com
          Version: "2012-10-17"
        Path: /
        Policies:
          - PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                    - "logs:DescribeLogGroups"
                    - "logs:DescribeLogStreams"
                  Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:*'
              Version: "2012-10-17"
            PolicyName: flowlogspolicy
      Type: "AWS::IAM::Role"
  VpcFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogGroupName: VpcFlowLogs
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", AvailabilityZoneId1]
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", PrivateCidrBlock1]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref NamingPrefix
              - Private
  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", AvailabilityZoneId2]
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", PrivateCidrBlock2]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref NamingPrefix
              - Private
  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", AvailabilityZoneId3]
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", PrivateCidrBlock3]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref NamingPrefix
              - Private
  PrivateRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  PrivateRouteTable:
    Type:  AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Security Group for VPC Endpoint"
      SecurityGroupIngress:
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: !GetAtt Vpc.CidrBlock
          Description: "Allows inbound traffic for HTTPS"
  AppRunnerIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Security Group for VPC Endpoint"
      SecurityGroupIngress:
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 8080
          IpProtocol: "tcp"
          ToPort: 8080
          Description: "Allows inbound traffic for AppRunner Apps"
  VPCEndpointForAppRunner:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
        VpcEndpointType: "Interface"
        VpcId: !Ref Vpc
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.apprunner.requests"
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        PrivateDnsEnabled: false
        SecurityGroupIds: 
          - !Ref AppRunnerIngressSecurityGroup
  
  VPCEndpointForS3:            
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      RouteTableIds: 
        - !Ref PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc
  VPCEndpointForDynamoDB:            
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      RouteTableIds: 
        - !Ref PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc
  VPCEndpointForSecretsManager:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  VPCEndpointForEC2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  VPCEndpointForSSM:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  VPCEndpointForCloudWatchLogs:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  VPCEndpointForSsmMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  VPCEndpointForECRApi:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  VPCEndpointForECRDkr:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  VPCEndpointForXRay:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.xray'
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  
#Ecr Repos
  CheckoutRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'checkout${Env}'
  CatalogRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'catalog${Env}'
  CartsRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'carts${Env}'
  AssetsRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'assets${Env}'
  OrdersRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'orders${Env}'

#SSM Params
  VpcIdParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub VpcId${Env}
      Value: !Ref Vpc
  VpcCidrBlockParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub VpcCidrBlock${Env}
      Value: !GetAtt Vpc.CidrBlock
  AppRunnerVpcEndpointParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub AppRunnerVpcEndpointId${Env}
      Value: !Ref VPCEndpointForAppRunner
  Subnet1Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub Subnet1${Env}
      Value: !Ref PrivateSubnet1
  Subnet2Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub Subnet2${Env}
      Value: !Ref PrivateSubnet2
  Subnet3Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub Subnet3${Env}
      Value: !Ref PrivateSubnet3
#Dynamo

#Aurora MySQL

# Outputs:
  # EKSClusterName:
  #   Description: The name of the EKS Cluster
  #   Value: !Ref EKSCluster
  # EKSOidcUrl:
  #   Description: The OIDC endpoint URL of the EKS Cluster
  #   Value: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
  # EKSApiEndpoint:
  #   Description: The Kubernetes API server endpoint URL
  #   Value: !GetAtt EKSCluster.Endpoint

