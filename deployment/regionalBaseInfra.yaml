AWSTemplateFormatVersion: "2010-09-09"
Description: 'Infrastructure'

Parameters:
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region
  NamingPrefix:
    Type: String
    Description: The prefix to be used for resources created by this template.
    Default: mr-app
  PrimaryRegion:
    Type: String
    Description: Enter the Primary Region
    Default: "us-east-1"
  StandbyRegion:
    Type: String
    Description: Enter the Standby Region
    Default: "us-west-2"
  KmsKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: KmsKey
    Description: CMK Id


Mappings:
  RegionMap:
    us-east-1:
      "VPCCidrBlock": 10.1.0.0/16
      "PrivateCidrBlock1": 10.1.0.0/20
      "PrivateCidrBlock2": 10.1.16.0/20
      "PrivateCidrBlock3": 10.1.32.0/20
      "PublicCidrBlock1": 10.1.48.0/20
      "PublicCidrBlock2": 10.1.64.0/20
      "PublicCidrBlock3": 10.1.80.0/20
      "AvailabilityZoneId1": use1-az1
      "AvailabilityZoneId2": use1-az4
      "AvailabilityZoneId3": use1-az6
    us-west-2:
      "VPCCidrBlock": 10.2.0.0/16
      "PrivateCidrBlock1": 10.2.0.0/20
      "PrivateCidrBlock2": 10.2.16.0/20
      "PrivateCidrBlock3": 10.2.32.0/20
      "PublicCidrBlock1": 10.2.48.0/20
      "PublicCidrBlock2": 10.2.64.0/20
      "PublicCidrBlock3": 10.2.80.0/20
      "AvailabilityZoneId1": usw2-az1
      "AvailabilityZoneId2": usw2-az2
      "AvailabilityZoneId3": usw2-az3

Conditions:
  isPrimary: !Equals
    - !Ref AWS::Region
    - us-east-1
  isStandby: !Equals
    - !Ref AWS::Region
    - us-west-2

Resources:
  #VPC
  # Vpc:
  #   Type: AWS::EC2::VPC
  #   Properties: 
  #     CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", "VPCCidrBlock"]
  #     EnableDnsSupport: true
  #     EnableDnsHostnames: true
  Igw:
    Type: AWS::EC2::InternetGateway
  IgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref Igw
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'

  prvRouteZero:
    DependsOn: Igw
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGW1
  prvRoutePeer:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !If [isPrimary, !FindInMap [RegionMap, !Ref StandbyRegion, "VPCCidrBlock"], !FindInMap [RegionMap, !Ref PrimaryRegion, "VPCCidrBlock"]]
      VpcPeeringConnectionId: !Sub '{{resolve:secretsmanager:VpcPeerId${Env}}}'
  natEip1:
    Type: AWS::EC2::EIP
  natGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref publicSubnet1
      AllocationId: !GetAtt natEip1.AllocationId
  pubRouteTable:
    DependsOn: IgwAttach
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      Tags:
        - Key: "Name"
          Value: "Public Route Table"
  pubRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - IgwAttach
    Properties:
      RouteTableId: !Ref pubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
  pubSnRta1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref pubRouteTable
      SubnetId: !Ref publicSubnet1
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      AvailabilityZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", AvailabilityZoneId1]
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", PublicCidrBlock1] 
  pubSnRta2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref pubRouteTable
      SubnetId: !Ref publicSubnet2
  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      AvailabilityZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", AvailabilityZoneId2]
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", PublicCidrBlock2]
  pubSnRta3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref pubRouteTable
      SubnetId: !Ref publicSubnet3
  publicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      AvailabilityZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", AvailabilityZoneId3]
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", PublicCidrBlock3]    

  FlowLogRole:
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action:
                - "sts:AssumeRole"
              Effect: Allow
              Principal:
                Service:
                  - vpc-flow-logs.amazonaws.com
          Version: "2012-10-17"
        Path: /
        Policies:
          - PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                    - "logs:DescribeLogGroups"
                    - "logs:DescribeLogStreams"
                  Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:*'
              Version: "2012-10-17"
            PolicyName: flowlogspolicy
      Type: "AWS::IAM::Role"
  VpcFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogGroupName: VpcFlowLogs
      ResourceId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      ResourceType: VPC
      TrafficType: ALL
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      AvailabilityZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", AvailabilityZoneId1]
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", PrivateCidrBlock1]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref NamingPrefix
              - Private
  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      AvailabilityZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", AvailabilityZoneId2]
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", PrivateCidrBlock2]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref NamingPrefix
              - Private
  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      AvailabilityZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", AvailabilityZoneId3]
      CidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", PrivateCidrBlock3]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref NamingPrefix
              - Private
  PrivateRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  PrivateRouteTable:
    Type:  AWS::EC2::RouteTable
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
  
#Ecr Repos
  CheckoutRepo:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub 'checkout${Env}'
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !Ref KmsKey
  CatalogRepo:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
          ScanOnPush: true
      RepositoryName: !Sub 'catalog${Env}'
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !Ref KmsKey
  CartsRepo:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub 'carts${Env}'
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !Ref KmsKey
  AssetsRepo:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub 'assets${Env}'
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !Ref KmsKey
  OrdersRepo:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub 'orders${Env}'
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !Ref KmsKey
  UIRepo:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      RepositoryName: !Sub 'ui${Env}'
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: KMS
        KmsKey: !Ref KmsKey

# Canary Security Group - In this stack since it take Lambda 20 mins to delete the ENIs it manages
  canarySg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      GroupDescription: Canary - Egress Only
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          Description: "Allow all egress"
          IpProtocol: "-1"

#SSM Params
  Subnet1Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub Subnet1${Env}
      Value: !Ref PrivateSubnet1
  Subnet2Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub Subnet2${Env}
      Value: !Ref PrivateSubnet2
  Subnet3Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub Subnet3${Env}
      Value: !Ref PrivateSubnet3
  PubSubnet1Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub PubSubnet1${Env}
      Value: !Ref publicSubnet1
  PubSubnet2Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub PubSubnet2${Env}
      Value: !Ref publicSubnet2
  PubSubnet3Param:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub PubSubnet3${Env}
      Value: !Ref publicSubnet3
  canarySgParam:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: String
      Name: !Sub canarySgId${Env}
      Value: !Ref canarySg

  VPCEndpointForSecretsManager:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcEndpointType: Interface
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecretsManagerSecurityGroup
  VPCEndpointSecretsManagerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      GroupDescription: VPC Endpoint SG
      Tags:
        - Key: Name
          Value: 'VPC Endpoint for Secrets Manager SG'
  VPCEndpointSMSgParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub VPCEndpointSecretsManagerSGId${Env}
      Value: !Ref VPCEndpointSecretsManagerSecurityGroup
  VPCEndpointForRDS:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.rds'
      VpcEndpointType: Interface
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointRDSSecurityGroup
  VPCEndpointRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      GroupDescription: VPC Endpoint SG
      Tags:
        - Key: Name
          Value: 'VPC Endpoint for RDS SG'
  VPCEndpointRDSSgParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub VPCEndpointRDSSGId${Env}
      Value: !Ref VPCEndpointRDSSecurityGroup
  VPCEndpointForS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
  VPCEndpointForSSM:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSSMSecurityGroup
  VPCEndpointForSSMMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSSMSecurityGroup
  VPCEndpointForEC2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSSMSecurityGroup
  VPCEndpointSSMSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      GroupDescription: VPC Endpoint SG
      Tags:
        - Key: Name
          Value: 'VPC Endpoint for SSM SG'
  VPCEndpointSSMSgParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub VPCEndpointSSMSGId${Env}
      Value: !Ref VPCEndpointSSMSecurityGroup