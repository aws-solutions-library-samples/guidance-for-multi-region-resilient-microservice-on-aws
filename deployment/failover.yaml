AWSTemplateFormatVersion: "2010-09-09"
Description: 'ARC Failover Automation - SSM Runbooks'

Parameters:
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region
  PrimaryRegion:
    Type: String
    Description: Enter the Primary Region
    Default: "us-east-1"
  StandbyRegion:
    Type: String
    Description: Enter the Standby Region
    Default: "us-west-2"
  PowerToolsLambdaLayerAccountId:
    Type: String
    Description: The AWS AccountId where the PowerTools Python Lambda Layer is hosted
    Default: 017000801446

Resources:
  LambdaExecutionRole:
    Type:  AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: AwsSolutions-IAM5
            reason: "The Lambda execution role requires broad permissions to interact with CloudWatch Logs, Route53 Recovery Control, and Secrets Manager for operational tasks."
            appliesTo:
              - "Resource::arn:aws:logs:*:<AWS::AccountId>:*"
              - "Resource::arn:aws:route53-recovery-control::<AWS::AccountId>:cluster/*"
              - "Resource::arn:aws:route53-recovery-control::<AWS::AccountId>:controlpanel/*"
              - "Resource::arn:aws:route53-recovery-control::<AWS::AccountId>:controlpanel/*/routingcontrol/*"
              - "Resource::arn:aws:secretsmanager:<AWS::Region>:<AWS::AccountId>:secret:*"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        - 
          PolicyName: lambdaExec
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub 'arn:aws:logs:*:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - "route53-recovery-cluster:GetRoutingControlState"
                  - "route53-recovery-cluster:UpdateRoutingControlState"
                Resource:
                  - !Sub 'arn:aws:route53-recovery-control::${AWS::AccountId}:cluster/*'
                  - !Sub 'arn:aws:route53-recovery-control::${AWS::AccountId}:controlpanel/*'
                  - !Sub 'arn:aws:route53-recovery-control::${AWS::AccountId}:controlpanel/*/routingcontrol/*'
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                  - "secretsmanager:CreateSecret"
                  - "secretsmanager:UpdateSecret"
                  - "secretsmanager:DeleteSecret"
                  - "secretsmanager:RemoveRegionsFromReplication"
                  - "secretsmanager:ReplicateSecretToRegions"
                  - "secretsmanager:ListSecrets"
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
  AutomationRegionalFailoverFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: AwsSolutions-L1
            reason: "Using python3.9 for compatibility reasons; upgrading the runtime is not feasible at this time."
    Properties:
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${PowerToolsLambdaLayerAccountId}:layer:AWSLambdaPowertoolsPythonV2:74
      TracingConfig: 
        Mode: Active
      FunctionName: !Sub AutomationRegionalFailoverFunction${Env}
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          from aws_lambda_powertools import Logger, Tracer, Metrics
          from aws_lambda_powertools.metrics import MetricUnit

          metrics = Metrics()
          tracer = Tracer()
          logger = Logger()

          @metrics.log_metrics(capture_cold_start_metric=False)
          @logger.inject_lambda_context(log_event=True, clear_state=True)
          @tracer.capture_lambda_handler
          def lambda_handler(event, context):
              return rotate_arc_controls(event, context)
              
          @tracer.capture_method
          def rotate_arc_controls(event, context):

              logger.info("update_arc_control Invoked")
              endpoints = json.loads(os.environ['ARC_CLUSTER_ENDPOINTS'])
              routing_control_primary_arn = os.environ['ARC_ROUTING_CONTROL_PRIMARY_ARN']
              routing_control_standby_arn = os.environ['ARC_ROUTING_CONTROL_STANDBY_ARN']
              updated_routing_control_state = "NotUpdated"
              action = event['ACTION']
              cell = event['REGION']
              done = False

              for region, endpoint in endpoints.items():
                  try:
                      logger.info("route 53 recovery cluster endpoint: " + endpoint)
                      client = boto3.client('route53-recovery-cluster', region_name=region, endpoint_url=endpoint)

                      logger.info("toggling routing control")
                
                      if action == "disable":
                        routingControlState = "Off"
                      elif action == "enable":
                        routingControlState = "On"
                      else:
                        logger.info("Invalid ACTION")
                        done = True
                        break

                      if cell == "Primary":
                        routing_control_state = client.get_routing_control_state(RoutingControlArn=routing_control_primary_arn)
                        logger.info("Current Routing Control State: " + routing_control_state["RoutingControlState"])
                        client.update_routing_control_state(RoutingControlArn=routing_control_primary_arn, RoutingControlState=routingControlState)
                        routing_control_state = client.get_routing_control_state(RoutingControlArn=routing_control_primary_arn)
                      elif cell == "Standby":
                        routing_control_state = client.get_routing_control_state(RoutingControlArn=routing_control_standby_arn)
                        logger.info("Current Routing Control State: " + routing_control_state["RoutingControlState"])
                        client.update_routing_control_state(RoutingControlArn=routing_control_standby_arn, RoutingControlState=routingControlState)
                        routing_control_state = client.get_routing_control_state(RoutingControlArn=routing_control_standby_arn)
                      else:
                        logger.info("invalid input for REGION")
                        done = True
                        break

                      updated_routing_control_state = routing_control_state["RoutingControlState"]
                      logger.info("Updated routing Control State is " + updated_routing_control_state)
                      done = True
                      break
                      
                  except Exception as e:
                      logger.exception("Exception occurred while toggling ARC Routing Control")
                  if done:
                      metrics.add_metric(name="RegionalFailover", unit=MetricUnit.Count, value=1)
                      break
              return {'routing_control_state': updated_routing_control_state}

          def dummy(event, context):
              logger.info("dummy")

      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: !Sub 'AutomationRegionalFailoverFunction${Env}'
          POWERTOOLS_METRICS_NAMESPACE: !Sub 'MultiRegionApp${Env}'
          LOG_LEVEL: INFO
          ARC_ROUTING_CONTROL_PRIMARY_ARN: !Sub '{{resolve:secretsmanager:ArcRoutingControlPrimarySecret${Env}}}'
          ARC_ROUTING_CONTROL_STANDBY_ARN: !Sub '{{resolve:secretsmanager:ArcRoutingControlStandbySecret${Env}}}'
          ARC_CLUSTER_ENDPOINTS: !Sub '{{resolve:secretsmanager:ArcClusterEndpoints${Env}}}'

  DisablePrimaryApplicationRunbook:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub 'mr-app-DisableApplication_PrimaryRegion${Env}'
      DocumentType: Automation
      DocumentFormat: YAML
      Content:
        description: |-
          *Runbook for Application Failover*
          ---
          # Runbook for Application Failover
          1. Rotate Arc Control
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutomationServiceRole${Env}'
        mainSteps:
          - name: DisableRouteControls
            action: 'aws:invokeLambdaFunction'
            maxAttempts: 1
            timeoutSeconds: 120
            onFailure: Abort
            inputs:
              FunctionName: !Ref AutomationRegionalFailoverFunction
              InputPayload:
                ACTION: disable
                REGION: Primary
            outputs:
              - Name: UPDATED_ROUTING_CONTROL_STATE
                Selector: $.Payload.routing_control_state
                Type: String

  DisableStandbyApplicationRunbook:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub 'mr-app-DisableApplication_StandbyRegion${Env}'
      DocumentType: Automation
      DocumentFormat: YAML
      Content:
        description: |-
          *Runbook for Application Failover*
          ---
          # Runbook for Application Failover
          1. Rotate Arc Control
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutomationServiceRole${Env}'
        mainSteps:
          - name: DisableRouteControls
            action: 'aws:invokeLambdaFunction'
            maxAttempts: 1
            timeoutSeconds: 120
            onFailure: Abort
            inputs:
              FunctionName: !Ref AutomationRegionalFailoverFunction
              InputPayload:
                ACTION: disable
                REGION: Standby
            outputs:
              - Name: UPDATED_ROUTING_CONTROL_STATE
                Selector: $.Payload.routing_control_state
                Type: String

  EnablePrimaryApplicationRunbook:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub 'EnableApplication_PrimaryRegion${Env}'
      DocumentType: Automation
      DocumentFormat: YAML
      Content:
        description: |-
          *Runbook for Application Failover*
          ---
          # Runbook for Application Failover
          1. Rotate Arc Control
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutomationServiceRole${Env}'
        mainSteps:
          - name: DisableRouteControls
            action: 'aws:invokeLambdaFunction'
            maxAttempts: 1
            timeoutSeconds: 120
            onFailure: Abort
            inputs:
              FunctionName: !Ref AutomationRegionalFailoverFunction
              InputPayload:
                ACTION: enable
                REGION: Primary
            outputs:
              - Name: UPDATED_ROUTING_CONTROL_STATE
                Selector: $.Payload.routing_control_state
                Type: String

  EnableStandbyApplicationRunbook:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub 'EnableApplication_StandbyRegion${Env}'
      DocumentType: Automation
      DocumentFormat: YAML
      Content:
        description: |-
          *Runbook for Application Failover*
          ---
          # Runbook for Application Failover
          1. Rotate Arc Control
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutomationServiceRole${Env}'
        mainSteps:
          - name: DisableRouteControls
            action: 'aws:invokeLambdaFunction'
            maxAttempts: 1
            timeoutSeconds: 120
            onFailure: Abort
            inputs:
              FunctionName: !Ref AutomationRegionalFailoverFunction
              InputPayload:
                ACTION: enable
                REGION: Standby
            outputs:
              - Name: UPDATED_ROUTING_CONTROL_STATE
                Selector: $.Payload.routing_control_state
                Type: String

  FailoverOrdersDbPrimary:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub 'mr-app-FailoverOrders_PrimaryRegion${Env}'
      DocumentType: Automation
      DocumentFormat: YAML
      Content:
        description: |-
          *Fail Application & Orders DB out of Primary Region*
          ---
          # Runbook for Application Failover
          1. Rotate Arc Control
          2. Failover Orders Global DB
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutomationServiceRole${Env}'
        mainSteps:
          - name: failOutApplication
            action: 'aws:executeAutomation'
            inputs:
              DocumentName: !Ref DisablePrimaryApplicationRunbook
              DocumentVersion: '1'
          - name: failoverAuroraGlobalDB
            action: 'aws:executeAwsApi'
            inputs:
              Service: rds
              Api: FailoverGlobalCluster
              AllowDataLoss: true
              GlobalClusterIdentifier: !Sub '{{resolve:secretsmanager:mr-app/orders-global-db-cluster${Env}}}'
              TargetDbClusterIdentifier: !Sub '{{resolve:secretsmanager:mr-app/orders-${StandbyRegion}-global-db-cluster${Env}}}'
            isEnd: true

  FailoverOrdersDbStandby:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub 'mr-app-FailoverOrders_StandbyRegion${Env}'
      DocumentType: Automation
      DocumentFormat: YAML
      Content:
        description: |-
          *Fail Application & Orders DB out of Standby Region*
          ---
          # Runbook for Application Failover
          1. Rotate Arc Control
          2. Failover Orders Global DB
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutomationServiceRole${Env}'
        mainSteps:
          - name: failOutApplication
            action: 'aws:executeAutomation'
            inputs:
              DocumentName: !Ref DisableStandbyApplicationRunbook
              DocumentVersion: '1'
          - name: failoverAuroraGlobalDB
            action: 'aws:executeAwsApi'
            inputs:
              Service: rds
              Api: FailoverGlobalCluster
              AllowDataLoss: true
              GlobalClusterIdentifier: !Sub '{{resolve:secretsmanager:mr-app/orders-global-db-cluster${Env}}}'
              TargetDbClusterIdentifier: !Sub '{{resolve:secretsmanager:mr-app/orders-${PrimaryRegion}-global-db-cluster${Env}}}'
            isEnd: true
  FailoverCatalogDbPrimary:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub 'mr-app-FailoverCatalog_PrimaryRegion${Env}'
      DocumentType: Automation
      DocumentFormat: YAML
      Content:
        description: |-
          *Fail Application & Catalog DB out of Primary Region*
          ---
          # Runbook for Application Failover
          1. Rotate Arc Control
          2. Failover Catalog Global DB
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutomationServiceRole${Env}'
        mainSteps:
          - name: failOutApplication
            action: 'aws:executeAutomation'
            inputs:
              DocumentName: !Ref DisablePrimaryApplicationRunbook
              DocumentVersion: '1'
          - name: failoverAuroraGlobalDB
            action: 'aws:executeAwsApi'
            inputs:
              Service: rds
              Api: FailoverGlobalCluster
              AllowDataLoss: true
              GlobalClusterIdentifier: !Sub '{{resolve:secretsmanager:mr-app/catalog-global-db-cluster${Env}}}'
              TargetDbClusterIdentifier: !Sub '{{resolve:secretsmanager:mr-app/catalog-${StandbyRegion}-global-db-cluster${Env}}}'
            isEnd: true
  FailoverCatalogDbStandby:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub 'mr-app-FailoverCatalog_StandbyRegion${Env}'
      DocumentType: Automation
      DocumentFormat: YAML
      Content:
        description: |-
          *Fail Application & Catalog DB out of Standby Region*
          ---
          # Runbook for Application Failover
          1. Rotate Arc Control
          2. Failover Catalog Global DB
        schemaVersion: '0.3'
        assumeRole: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AutomationServiceRole${Env}'
        mainSteps:
          - name: failOutApplication
            action: 'aws:executeAutomation'
            inputs:
              DocumentName: !Ref DisableStandbyApplicationRunbook
              DocumentVersion: '1'
          - name: failoverAuroraGlobalDB
            action: 'aws:executeAwsApi'
            inputs:
              Service: rds
              Api: FailoverGlobalCluster
              AllowDataLoss: true
              GlobalClusterIdentifier: !Sub '{{resolve:secretsmanager:mr-app/catalog-global-db-cluster${Env}}}'
              TargetDbClusterIdentifier: !Sub '{{resolve:secretsmanager:mr-app/catalog-${PrimaryRegion}-global-db-cluster${Env}}}'
            isEnd: true