---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Aurora Global database standby region
Mappings:
  MinorUpdateMap:
    'Yes':
      value: 'true'
    'No':
      value: 'false'
  EngineMap:
    '5.7':
      family: aurora-mysql5.7
Parameters:
  NamingPrefix:
    Type: String
    Default: mr-app
    Description: Enter the Naming Prefix for resources created
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - uat
  MachineType:
    # global databases support either db.r4 or db.r5
    Default: db.r5.large
    Type: String
    AllowedValues:
      - db.r4.large
      - db.r5.large
  DatabaseName:
    Default: globalDatabase
    Type: String
  MinorVersionUpgrade:
    Default: 'Yes'
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
  MySqlVersion:
    Default: '5.7'
    Type: String
    AllowedValues:
      - '5.7'
  MySqlEngineMode:
    Default: 'provisioned'
    Type: String
    AllowedValues:
      - 'provisioned'
  ClusterName:
    Default: dbcluster-02
    Type: String
  GlobalClusterIdentifier:
    Default: global-db-cluster
    Type: String
  PrimaryRegion:
    Type: String
    Description: Enter the Primary Region
    Default: "us-east-1"
  StandbyRegion:
    Type: String
    Description: Enter the Standby Region
    Default: "us-west-2"
Resources:
  DBStorageEncryptionKMSKey:
    Type: 'AWS::KMS::ReplicaKey'
    Properties:
      PrimaryKeyArn: !Sub '{{resolve:secretsmanager:${NamingPrefix}-${GlobalClusterIdentifier}-StorageEncryptionKeyArn-${Env}}}'
      Description: Multi-Region Aurora Storage Encryption Key
      PendingWindowInDays: 10
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Family: !FindInMap
        - EngineMap
        - !Ref MySqlVersion
        - family
      Parameters:
        max_connections: 300
      Description: DB Cluster Parameter Group
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: !FindInMap
        - EngineMap
        - !Ref MySqlVersion
        - family
      Parameters:
        max_connections: 300
      Description: DB Instance Parameter Group
  DBCluster:
    DependsOn:
      - DBClusterParameterGroup
      - SubnetGroup
    Type: AWS::RDS::DBCluster
    Properties:
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 7
      CopyTagsToSnapshot: true
      DBClusterIdentifier: !Sub '${NamingPrefix}-${ClusterName}-${AWS::Region}-${Env}'
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      DBSubnetGroupName: !Ref SubnetGroup
      DeletionProtection: false
      EnableCloudwatchLogsExports:
        - audit
        - error
        - general
        - slowquery
      EnableIAMDatabaseAuthentication: true
      Engine: aurora-mysql
      EngineVersion: !Ref MySqlVersion
      EngineMode: !Ref MySqlEngineMode
      GlobalClusterIdentifier: !Sub '${NamingPrefix}-${GlobalClusterIdentifier}-${Env}'
      KmsKeyId: 'mrk-aa976fa137b340d08fedaa7149728814'
      Port: '3306'
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Sub '{{resolve:ssm:MR-aurora-mysql-sg-${AWS::Region}-${Env}}}'
      Tags:
        - Key: "NamingPrefix"
          Value: !Ref NamingPrefix
  DBInstance1:
    DependsOn:
      - DBParameterGroup
      - DBCluster
      - SubnetGroup
    Type: AWS::RDS::DBInstance
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: !FindInMap
        - MinorUpdateMap
        - !Ref MinorVersionUpgrade
        - value
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub '${ClusterName}-1'
      DBInstanceClass: !Ref MachineType
      DBParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref SubnetGroup
      Engine: aurora-mysql
      EngineVersion: !Ref MySqlVersion
      PubliclyAccessible: false
      MonitoringRoleArn: !Sub '{{resolve:secretsmanager:${NamingPrefix}-${GlobalClusterIdentifier}-MonitoringIAMRoleArn-${Env}}}'
      MonitoringInterval: 1
  DBInstance2:
    DependsOn:
      - DBParameterGroup
      - DBCluster
      - SubnetGroup
    Type: AWS::RDS::DBInstance
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: !FindInMap
        - MinorUpdateMap
        - !Ref MinorVersionUpgrade
        - value
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub '${ClusterName}-2'
      DBInstanceClass: !Ref MachineType
      DBParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref SubnetGroup
      Engine: aurora-mysql
      EngineVersion: !Ref MySqlVersion
      PubliclyAccessible: false
      MonitoringRoleArn: !Sub '{{resolve:secretsmanager:${NamingPrefix}-${GlobalClusterIdentifier}-MonitoringIAMRoleArn-${Env}}}'
      MonitoringInterval: 1
  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      SubnetIds:
        - !Sub '{{resolve:ssm:Subnet1-${Env}}}'
        - !Sub '{{resolve:ssm:Subnet2-${Env}}}'
        - !Sub '{{resolve:ssm:Subnet3-${Env}}}'
      DBSubnetGroupDescription: !Sub ${DatabaseName}-subnet-group
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: Allow
                Resource: "arn:aws:logs:*:*:*"
              - Action:
                  - "rds:ModifyDBCluster"
                Effect: Allow
                Resource: "arn:aws:rds:*:*:cluster:*"
            Version: "2012-10-17"
          PolicyName: root
    Type: "AWS::IAM::Role"
  CustomBackedLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub EnableWriteForwardingForDBCluster${Env}
      Runtime: python3.10
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Timeout: 90
      Environment:
        Variables:
          DBClusterIdentifier: !Sub '${NamingPrefix}-${ClusterName}-${AWS::Region}-${Env}'
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import boto3
          import os
          # Init of the logging module
          logger=logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              try:
                rds = boto3.client('rds')
                if event.get('RequestType') == 'Create':
                    responseData = {}
                    rds.modify_db_cluster(
                        DBClusterIdentifier=os.environ['DBClusterIdentifier'],
                        EnableGlobalWriteForwarding=True
                    )
                    responseData['message'] = 'Success'
                    logger.info('Sending %s to cloudformation', responseData['message'])
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                elif event.get('RequestType') == 'Update':
                    responseData = {}
                    rds.modify_db_cluster(
                        DBClusterIdentifier=os.environ['DBClusterIdentifier'],
                        EnableGlobalWriteForwarding=True
                    )
                    responseData['message'] = 'Success'
                    logger.info('Sending %s to cloudformation', responseData['message'])
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                else:
                    logger.error('Unknown operation: %s', event.get('RequestType'))
                    responseData = {}
                    responseData['message'] = "Invalid operation"
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as err:
                responseData = {}
                responseData['message'] = 'Failed'
                logger.error(err)
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
      Description: FUnction to enable Global Write Forwarding

  InvokeCustomLambda:
    DependsOn: CustomBackedLambda
    Type: Custom::InvokeCustomLambda
    Properties:
      ServiceToken: !GetAtt CustomBackedLambda.Arn
Outputs:
  DBEndpoint:
    Value: !GetAtt DBCluster.Endpoint.Address
  DBPort:
    Value: !GetAtt DBCluster.Endpoint.Port