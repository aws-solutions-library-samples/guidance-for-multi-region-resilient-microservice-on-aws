AWSTemplateFormatVersion: 2010-09-09
Description: Solution that uses SSM Automation to create encrypted snapshots of RDS clusters and then copy those snapshots to a different AWS region for DR purposes.
Parameters: 
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region
  SourceRegion:
    Type: String
    Description: Enter the Primary Region
    Default: "us-east-1"
  TargetRegion:
    Type: String
    Description: Enter the Standby Region
    Default: "us-west-2"
  GlobalClusterIdentifier:
    Default: global-db-cluster
    Type: String
    
Resources: 

  CrossRegionSnapshotCopySSMAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        Fn::Join:
        - "-"
        - - "CRDR-SSMRole"
          - !Ref SourceRegion
          - Fn::Select:
            - 0
            - Fn::Split:
              - "-"
              - Fn::Select:
                - 2
                - Fn::Split:
                  - "/"
                  - !Ref AWS::StackId
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ssm.amazonaws.com
      Path: "/"
      Policies:
        - PolicyName: 
            Fn::Join:
            - "-"
            - - "CRDR-SSMPolicy"
              - !Ref SourceRegion
              - Fn::Select:
                - 0
                - Fn::Split:
                  - "-"
                  - Fn::Select:
                    - 2
                    - Fn::Split:
                      - "/"
                      - !Ref AWS::StackId
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ["rds:*"]
                Resource: 
                  - !Sub '{{resolve:secretsmanager:mr-app/orders-${SourceRegion}-${GlobalClusterIdentifier}${Env}}}'                  
                  - Fn::Join:
                    - ":"
                    - - "arn:aws:rds"
                      - !Ref SourceRegion
                      - !Ref AWS::AccountId
                      - "cluster-snapshot"
                      - Fn::Join:
                        - "-"
                        - -  !Sub '{{resolve:secretsmanager:mr-app/orders-${SourceRegion}-DBClusterIdentifier${Env}}}'               
                          - 'db-snapshot-*'
                   
              - Effect: Allow
                Action: ["rds:DescribeDBClusterSnapshots"]
                Resource: 
                  - "*"
              - Effect: Allow
                Action: ["rds:CopyDBClusterSnapshot", "rds:AddTagsToResource"]
                Resource: 
                  - Fn::Join:
                    - ":"
                    - - "arn:aws:rds"
                      - !Ref SourceRegion
                      - !Ref AWS::AccountId
                      - "cluster-snapshot"
                      - Fn::Join:
                        - "-"
                        - - !Sub '{{resolve:secretsmanager:mr-app/orders-${SourceRegion}-DBClusterIdentifier${Env}}}' 
                          - 'db-snapshot-*'
                  - Fn::Join:                    
                    - ":"
                    - - "arn:aws:rds"
                      - !Ref TargetRegion
                      - !Ref AWS::AccountId
                      - "cluster-snapshot"
                      - Fn::Join:
                        - "-"
                        - - !Sub '{{resolve:secretsmanager:mr-app/orders-${SourceRegion}-DBClusterIdentifier${Env}}}' 
                          - 'db-snapshot-*'
              - Effect: Allow
                Action: ["kms:DescribeKey","kms:CreateGrant"]
                Resource:  
                  - !Sub '{{resolve:secretsmanager:mr-app/orders-${GlobalClusterIdentifier}-StorageEncryptionKeyArn${Env}}}'                
                  - !Sub '{{resolve:secretsmanager:mr-app/orders-${TargetRegion}-${GlobalClusterIdentifier}-Snapshot-KeyArn${Env}}}' 
                  
  CrossRegionSnapshotCopySSMAutomationRoleArn:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "mr-app/CrossRegionSnapshotCopySSMAutomationRoleArn"
      Description: "Arn for CrossRegionSnapshotCopySSMAutomationRole"
      KmsKeyId: "alias/aws/secretsmanager"
      SecretString: !GetAtt CrossRegionSnapshotCopySSMAutomationRole.Arn
      ReplicaRegions:
        - Region: us-west-2
  CrossRegionSnapshotCopySSMAutomation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: 
        Fn::Join:
        - "-"
        - - "CRDR-SSMAutomation-Orders"
          - !Ref SourceRegion         
          - Fn::Select:
            - 0
            - Fn::Split:
              - "-"
              - Fn::Select:
                - 2
                - Fn::Split:
                  - "/"
                  - !Ref AWS::StackId
      Content:
        description: Aurora RDS Cluster Snapshot and Copy Automation Document
        schemaVersion: '0.3'
        assumeRole: !GetAtt CrossRegionSnapshotCopySSMAutomationRole.Arn
        mainSteps:
          - name: CreateSnapshot
            action: 'aws:executeAwsApi'
            inputs:
              Service: rds
              Api: CreateDBClusterSnapshot
              DBClusterSnapshotIdentifier: 
                Fn::Join:
                  - "-"
                  - - !Sub '{{resolve:secretsmanager:mr-app/orders-${SourceRegion}-DBClusterIdentifier${Env}}}' 
                    - 'db-snapshot-{{automation:EXECUTION_ID}}'
              DBClusterIdentifier: !Sub '{{resolve:secretsmanager:mr-app/orders-${SourceRegion}-DBClusterIdentifier${Env}}}' 
            outputs:
              - Name: SnapShotId
                Selector: $.DBClusterSnapshot.DBClusterSnapshotIdentifier
                Type: String
              - Name: DBClusterId
                Selector: $.DBClusterSnapshot.DBClusterIdentifier
                Type: String
              - Name: DBClusterSnapshotArn
                Selector: $.DBClusterSnapshot.DBClusterSnapshotArn
                Type: String              
          - name: waitForSnapshotCompletion
            action: 'aws:waitForAwsResourceProperty'
            inputs:
              Service: rds
              Api: DescribeDBClusterSnapshots
              DBClusterSnapshotIdentifier: '{{CreateSnapshot.SnapShotId}}'                
              DBClusterIdentifier: '{{CreateSnapshot.DBClusterId}}'
              PropertySelector: '$.DBClusterSnapshots[0].Status'
              DesiredValues:
                - available
          - name: ExecuteCode
            action: 'aws:executeScript'
            inputs:
              Runtime: python3.7
              Handler: script_handler
              InputPayload:
                snapshotid: '{{CreateSnapshot.SnapShotId}}'
                snapshotarn: '{{CreateSnapshot.DBClusterSnapshotArn}}'
                dbclusterid: '{{CreateSnapshot.DBClusterId}}'
                automationid: '{{automation:EXECUTION_ID}}'
                sourceregion: !Ref SourceRegion
                targetregion: !Ref TargetRegion
                kmstargetkey: !Sub '{{resolve:secretsmanager:mr-app/orders-${TargetRegion}-${GlobalClusterIdentifier}-Snapshot-KeyArn${Env}}}' 
              Script: |-
                def script_handler(event, context):
                  import boto3, json, os
                  # Input parameters are provided by SSM document    
                  snapshotid = event.get("snapshotid")
                  snapshotarn = event.get("snapshotarn")
                  dbclusterid = event.get("dbclusterid")
                  sourceregion = event.get("sourceregion")
                  targetregion = event.get("targetregion")
                  kmstargetkey = event.get("kmstargetkey")
                  
                  print(snapshotid)
                  print(snapshotarn)
                  print(dbclusterid)
                  print(kmstargetkey)

                  # Define Target region in the region_name.Following API
                  # is expected to run in Target region. Hence, by setting region_name
                  # to Target region, we achive that.
                  client = boto3.client('rds', region_name=targetregion)
                  try: 
                    response = client.copy_db_cluster_snapshot(
                        SourceDBClusterSnapshotIdentifier=snapshotarn,
                        TargetDBClusterSnapshotIdentifier=snapshotid,
                        KmsKeyId=kmstargetkey, # KMS Key ID in Target region
                        CopyTags=False,
                        Tags=[
                                {
                                    'Key': 'NamingPrefix',
                                    'Value': 'orders'
                                },
                            ],
                        SourceRegion=sourceregion # This attribute will automatically generate presigned URL
                    )
                    print(response)
                    copystatus = response.get("DBClusterSnapshot").get("Status")
                    print("Status of Copying of Snapshot:" + str(copystatus))

                  except botocore.exceptions.ClientError as error:
                    raise error
                  except botocore.exceptions.ParamValidationError as error:
                    raise ValueError('The parameters you provided are incorrect: {}'.format(error))    
Outputs:
  AutomationDocument:
    Value: !Ref CrossRegionSnapshotCopySSMAutomation
  SSMAutomationRole:
    Value: !Ref CrossRegionSnapshotCopySSMAutomationRole
    