AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Solution that uses SSM Automation to restore encrypted snapshots of RDS
  cluster Orders DB
Parameters:
  NamingPrefix:
    Type: String
    Description: Enter the Naming Prefix for resources created
    Default: orders
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region
  SourceRegion:
    Type: String
    Description: Enter the Primary Region
    Default: us-east-1
  TargetRegion:
    Type: String
    Description: Enter the Standby Region
    Default: us-west-2
  DBClusterIdentifier:
    Default: recociliation-db-cluster
    Type: String
  GlobalClusterIdentifier:
    Default: global-db-cluster
    Type: String
Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::Sub: '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      GroupDescription: Lambda function access to aurora mysql and reconciliation
        database
      Tags:
      - Key: Name
        Value: lambda-aurora-mysql-security-group
      SecurityGroupIngress:
      - CidrIp: 10.2.0.0/16
        Description: Allow all egress
        IpProtocol: '-1'
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        Description: Allow all egress
        IpProtocol: '-1'
  LambdaSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow traffic to 10.2.0.0/16
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId:
        Ref: LambdaSecurityGroup
      GroupId:
        Fn::Sub: '{{resolve:ssm:orders-aurora-mysql-sg-${AWS::Region}${Env}}}'
  AutomationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: automation-invoke-lambda-execution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - LambdaFunction
              - Arn
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: reconciliation-orders.lambda_handler
      CodeUri: s3://lambda-artifacts-eddbc25f92c79902/28ba6259791eb8840ce36b92a6b2253e
      Runtime: python3.12
      Architectures:
      - x86_64
      EphemeralStorage:
        Size: 512
      Timeout: 600
      ReservedConcurrentExecutions: 5
      PackageType: Zip
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Fn::Sub: '{{resolve:ssm:Subnet1}}'
        - Fn::Sub: '{{resolve:ssm:Subnet2}}'
        - Fn::Sub: '{{resolve:ssm:Subnet3}}'
        Ipv6AllowedForDualStack: false
      Layers:
      - Ref: libs
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - ec2:CreateNetworkInterface
          - ec2:DeleteNetworkInterface
          - ec2:DescribeNetworkInterfaces
          Resource: '*'
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          Resource: arn:aws:logs:us-west-2:511925798765:*
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - arn:aws:logs:us-west-2:511925798765:log-group:/aws/lambda/reconciliation-test:*
        - Effect: Allow
          Action:
          - rds:*
          Resource:
          - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:orders-recociliation-db-cluster-*
          - Fn::Sub: '{{resolve:secretsmanager:mr-app/orders-${TargetRegion}-global-db-cluster${Env}}}'
  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: reconcliliation-python-function-lib
      Description: Dependencies for the reconcliliation-python function.
      ContentUri: s3://lambda-artifacts-eddbc25f92c79902/d12575cf37417c710d4b0af584ca096b
      CompatibleRuntimes:
      - python3.12
  CrossRegionSnapshotRestoreSSMAutomation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name:
        Fn::Join:
        - '-'
        - - CRDR-SSMAutomation-Reconciliation
          - Ref: TargetRegion
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      Content:
        description: Aurora RDS Cluster Snapshot and Copy Automation Document
        parameters:
          SnapshotArn:
            type: String
            description: (Required) Arn of the cross region DR snapshot
            default: ''
        schemaVersion: '0.3'
        assumeRole:
          Fn::Sub: '{{resolve:secretsmanager:mr-app/CRDRSSMAutomationRoleArn-${SourceRegion}}}'
        mainSteps:
        - name: RestoreSnapshot
          action: aws:executeAwsApi
          inputs:
            Service: rds
            Api: RestoreDBClusterFromSnapshot
            DBClusterIdentifier:
              Fn::Join:
              - '-'
              - - orders-recociliation-db-cluster
                - Ref: TargetRegion
                - Fn::Select:
                  - 0
                  - Fn::Split:
                    - '-'
                    - Fn::Select:
                      - 2
                      - Fn::Split:
                        - /
                        - Ref: AWS::StackId
            Engine: aurora-mysql
            SnapshotIdentifier:
              Fn::Sub: '{{SnapshotArn}}'
            KmsKeyId:
              Fn::Sub: '{{resolve:secretsmanager:mr-app/${NamingPrefix}-${TargetRegion}-${GlobalClusterIdentifier}-Snapshot-KeyArn${Env}}}'
          outputs:
          - Name: ReconciliationClusterId
            Selector: $. DBCluster.DBClusterIdentifier
            Type: String
          - Name: ReconciliationClusterArn
            Selector: $. DBCluster.DBClusterArn
            Type: String
        - name: waitForDBCompletion
          action: aws:waitForAwsResourceProperty
          inputs:
            Service: rds
            DBClusterIdentifier: '{{RestoreSnapshot.ReconciliationClusterId}}'
            PropertySelector: $.DBClusters[0].Status
            DesiredValues:
            - available
        - name: ExecuteLambda
          action: aws:invokeLambdaFunction
          onFailure: Abort
          maxAttempts: 3
          timeoutSeconds: 600
          inputs:
            FunctionName:
              Ref: LambdaFunction
            InputPayload:
              source_db_arn: '{{RestoreSnapshot.ReconciliationClusterArn}}'
              target_db_arn:
                Fn::Sub: '{{resolve:secretsmanager:mr-app/orders-${TargetRegion}-${GlobalClusterIdentifier}${Env}}}'
              user_name:
                Fn::Sub: '{{resolve:secretsmanager:mr-app/orders-${GlobalClusterIdentifier}-UserCredentials${Env}:SecretString:username}}'
              password:
                Fn::Sub: '{{resolve:secretsmanager:mr-app/orders-${GlobalClusterIdentifier}-UserCredentials${Env}:SecretString:password}}'
              db_name: orders
Outputs:
  AutomationDocument:
    Value:
      Ref: CrossRegionSnapshotRestoreSSMAutomation
