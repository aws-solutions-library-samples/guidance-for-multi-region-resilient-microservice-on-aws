AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Solution that uses SSM Automation to restore encrypted snapshots of RDS cluster Orders DB

Parameters: 
  NamingPrefix:
    Type: String
    Description: Enter the Naming Prefix for resources created
    Default: "orders"
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region
  SourceRegion:
    Type: String
    Description: Enter the Primary Region
    Default: "us-east-1"
  TargetRegion:
    Type: String
    Description: Enter the Standby Region
    Default: "us-west-2"
  DBClusterIdentifier:
    Default: reconciliation-db-cluster
    Type: String
  GlobalClusterIdentifier:
    Default: global-db-cluster
    Type: String

Resources: 
  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      SubnetIds:
        - !Sub '{{resolve:ssm:Subnet1${Env}}}'
        - !Sub '{{resolve:ssm:Subnet2${Env}}}'
        - !Sub '{{resolve:ssm:Subnet3${Env}}}'
      DBSubnetGroupDescription: "orders-subnet-group"
      DBSubnetGroupName: 'orders-recon-dbcluster-subnet-group'
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      GroupDescription: Lambda function access to aurora mysql and reconciliation database
      Tags:
        - Key: Name
          Value: lambda-aurora-mysql-security-group
      SecurityGroupIngress: 
        -           
          CidrIp: "10.2.0.0/16"
          Description: "Allow all egress"
          IpProtocol: "-1"
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          Description: "Allow all egress"
          IpProtocol: "-1"        
  LambdaSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow traffic to 10.2.0.0/16"
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      GroupId: !Sub '{{resolve:ssm:orders-aurora-mysql-sg-${AWS::Region}${Env}}}'

  AutomationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: automation-invoke-lambda-execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt LambdaFunction.Arn


  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: reconciliation-orders.lambda_handler
      CodeUri: function/.
      Runtime: python3.12
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Timeout: 600
      ReservedConcurrentExecutions: 5
      PackageType: Zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup          
        SubnetIds:
          - !Sub '{{resolve:ssm:Subnet1${Env}}}'
          - !Sub '{{resolve:ssm:Subnet2${Env}}}'
          - !Sub '{{resolve:ssm:Subnet3${Env}}}'        
        Ipv6AllowedForDualStack: false
      Environment:
        Variables:
          user_name: !Sub '{{resolve:secretsmanager:mr-app/orders-${GlobalClusterIdentifier}-UserCredentials${Env}:SecretString:username}}'
          password: !Sub '{{resolve:secretsmanager:mr-app/orders-${GlobalClusterIdentifier}-UserCredentials${Env}:SecretString:password}}'
      Layers:
        - !Ref libs
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: arn:aws:logs:us-west-2:511925798765:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - >-
                arn:aws:logs:us-west-2:511925798765:log-group:/aws/lambda/reconciliation-test:*
          - Effect: Allow
            Action: ["rds:*"]              
            Resource: 
              - !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:orders-reconciliation-db-cluster-*'
              - !Sub '{{resolve:secretsmanager:mr-app/orders-${TargetRegion}-global-db-cluster${Env}}}'
  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: reconcliliation-python-function-lib
      Description: Dependencies for the reconcliliation-python function.
      ContentUri: function/package/.
      CompatibleRuntimes:
        - python3.12        

  CrossRegionSnapshotRestoreSSMAutomation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: 
        Fn::Join:
        - "-"
        - - "CRDR-SSMAutomation-Reconciliation"
          - !Ref TargetRegion         
          - Fn::Select:
            - 0
            - Fn::Split:
              - "-"
              - Fn::Select:
                - 2
                - Fn::Split:
                  - "/"
                  - !Ref AWS::StackId        
      Content:
        description: Aurora RDS Cluster Snapshot and Copy Automation Document
        parameters:
          SnapshotArn:
            type: "String"
            description: "(Required) Arn of the cross region DR snapshot"
            default: ""
        schemaVersion: '0.3'
        assumeRole: !Sub '{{resolve:secretsmanager:mr-app/CRDRSSMAutomationRoleArn}}'   
        mainSteps:
            - name: RestoreSnapshot 
              action: 'aws:executeAwsApi'
              inputs:
                Service: rds
                Api: RestoreDBClusterFromSnapshot                 
                DBClusterIdentifier: "orders-recon-dbcluster-{{automation:EXECUTION_ID}}"
                Engine: aurora-mysql
                SnapshotIdentifier : !Sub "{{SnapshotArn}}"
                EnableIAMDatabaseAuthentication: true
                KmsKeyId:  !Sub '{{resolve:secretsmanager:mr-app/${NamingPrefix}-${TargetRegion}-${GlobalClusterIdentifier}-Snapshot-KeyArn${Env}}}' 
                ServerlessV2ScalingConfiguration:
                  MinCapacity: 1
                  MaxCapacity: 8
                DBSubnetGroupName: !Ref SubnetGroup
                VpcSecurityGroupIds: 
                  - !Sub '{{resolve:ssm:orders-aurora-mysql-sg-${AWS::Region}${Env}}}'
                DeletionProtection: false
                Tags:
                  - Key: "NamingPrefix"
                    Value: !Ref NamingPrefix
              outputs:
                - Name: ReconciliationClusterId
                  Selector: $.DBCluster.DBClusterIdentifier 
                  Type: String
                - Name: ReconciliationClusterArn
                  Selector: $.DBCluster.DBClusterArn 
                  Type: String
                - Name: ReconciliationClusterEndpoint
                  Selector: $.DBCluster.Endpoint 
                  Type: String
                  
            - name: waitForDBCompletion
              action: 'aws:waitForAwsResourceProperty'
              inputs:
                Service: rds
                Api: DescribeDBClusters
                DBClusterIdentifier: '{{RestoreSnapshot.ReconciliationClusterId}}'
                PropertySelector: '$.DBClusters[0].Status'
                DesiredValues:
                  - available
            
            - name: CreateDBInstance 
              action: 'aws:executeAwsApi'
              inputs:
                Service: rds
                Api: CreateDBInstance                 
                DBInstanceIdentifier: "orders-recon-dbinstance-{{automation:EXECUTION_ID}}" 
                DBClusterIdentifier: '{{RestoreSnapshot.ReconciliationClusterId}}'
                Engine: aurora-mysql
                DBInstanceClass: "db.serverless"                                
              outputs:
                - Name: ReconciliationDBInstanceId
                  Selector: $.DBInstance.DBInstanceIdentifier  
                  Type: String
                - Name: ReconciliationDBInstanceArn
                  Selector: $.DBInstance.DBInstanceArn  
                  Type: String               


            - name: waitForDBInstance
              action: 'aws:waitForAwsResourceProperty'
              inputs:
                Service: rds
                Api: DescribeDBInstances
                DBInstanceIdentifier: '{{CreateDBInstance.ReconciliationDBInstanceId}}'
                PropertySelector: '$.DBInstances[0].DBInstanceStatus'
                DesiredValues:
                  - available

            - name: ExecuteLambda
              action: 'aws:invokeLambdaFunction'
              onFailure: Abort
              maxAttempts: 3
              timeoutSeconds: 600
              inputs:
                FunctionName: !Ref LambdaFunction
                InputPayload: 
                  source_db_endpoint : '{{RestoreSnapshot.ReconciliationClusterEndpoint}}'
                  target_db_endpoint: !Sub '{{resolve:secretsmanager:mr-app/orders-${TargetRegion}-${GlobalClusterIdentifier}-endpoint${Env}}}'                  
                  db_name: orders

Outputs:      
  AutomationDocument:
    Value: !Ref CrossRegionSnapshotRestoreSSMAutomation