AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Solution that sets up Secrets Rotation for DB Credentials of Aurora MySql database

Parameters:
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region
  OrdersDBCredentialsSecretId:
    Type: String
    Description: OrdersDB Credentials SecretId to enable Rotation
  CatalogDBCredentialsSecretId:
    Type: String
    Description: CatalogDB Credentials SecretId to enable Rotation

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Sub '{{resolve:secretsmanager:VpcId-${AWS::Region}${Env}}}'
      GroupDescription: Lambda function access to aurora mysql databases
      Tags:
        - Key: Name
          Value: !Sub 'secrets-rotation-aurora-mysql-security-group${Env}'
      SecurityGroupEgress: 
        - DestinationSecurityGroupId: !Sub '{{resolve:ssm:orders-aurora-mysql-sg-${AWS::Region}${Env}}}'
          Description: "Allow all egress to MySQL Port 3306"
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
        - DestinationSecurityGroupId: !Sub '{{resolve:ssm:catalog-aurora-mysql-sg-${AWS::Region}${Env}}}'
          Description: "Allow all egress to MySQL Port 3306"
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
        - DestinationSecurityGroupId: !Sub '{{resolve:ssm:VPCEndpointSecretsManagerSGId${Env}}}'
          Description: "Allow VPC Endpoint Access"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
  CatalogAuroraMySqlComputeSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow traffic on MySql Port"
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      GroupId: !Sub '{{resolve:ssm:catalog-aurora-mysql-sg-${AWS::Region}${Env}}}'
  OrdersAuroraMySqlComputeSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow traffic on MySql Port"
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      GroupId: !Sub '{{resolve:ssm:orders-aurora-mysql-sg-${AWS::Region}${Env}}}'
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rotate-secrets.lambda_handler
      CodeUri: function/.
      Runtime: python3.12
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Timeout: 600
      ReservedConcurrentExecutions: 5
      PackageType: Zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup          
        SubnetIds:
          - !Sub '{{resolve:ssm:Subnet1${Env}}}'
          - !Sub '{{resolve:ssm:Subnet2${Env}}}'
          - !Sub '{{resolve:ssm:Subnet3${Env}}}'        
        Ipv6AllowedForDualStack: false
      Layers:
        - !Ref libs
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
              - secretsmanager:UpdateSecretVersionStage
            Resource: '*'
          - Effect: Allow
            Action:
              - secretsmanager:GetRandomPassword
            Resource: '*'
  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: secrets-rotation-python-function-lib
      Description: Dependencies for the secrets-rotation-python function.
      ContentUri: function/package/.
      CompatibleRuntimes:
        - python3.12
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaFunction
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: 'secretsmanager.amazonaws.com'
  OrdersDBCredentialsSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn:
      - LambdaInvokePermission
    Properties:
      SecretId: !Ref OrdersDBCredentialsSecretId
      RotationLambdaARN: !GetAtt LambdaFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 90
  CatalogDBCredentialsSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn:
      - LambdaInvokePermission
    Properties:
      SecretId: !Ref CatalogDBCredentialsSecretId
      RotationLambdaARN: !GetAtt LambdaFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 90
  VPCEndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Sub '{{resolve:ssm:VPCEndpointSecretsManagerSGId${Env}}}'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

Outputs:
  LambdaFunction:
    Value: !Ref LambdaFunction