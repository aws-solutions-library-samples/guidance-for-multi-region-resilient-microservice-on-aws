AWSTemplateFormatVersion: "2010-09-09"
Description: "Canaries"

Parameters:
  Env:
    Type: String
    Default: ''
    Description: String to enable multiple deployments per AWS region

Resources:
# Canaries
  canaryBucket:
    Type: AWS::S3::Bucket
    Properties:
      IntelligentTieringConfigurations: 
        -
          Id: default
          Status: Enabled
          Tierings: 
            - 
              AccessTier: ARCHIVE_ACCESS
              Days: 90    

  canaryPolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        #ManagedPolicyName: !Sub "CloudWatchSyntheticsPolicy${Env}"
        Path: "/service-role/"
        PolicyDocument: !Sub |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "s3:PutObject",
                            "s3:GetObject"
                        ],
                        "Resource": [
                            "arn:aws:s3:::${canaryBucket}/canary/${AWS::Region}/*"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "s3:GetBucketLocation"
                        ],
                        "Resource": [
                            "arn:aws:s3:::${canaryBucket}"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "logs:CreateLogGroup"
                        ],
                        "Resource": [
                            "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cwsyn-*"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "s3:ListAllMyBuckets",
                            "xray:PutTraceSegments"
                        ],
                        "Resource": [
                            "*"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Resource": "*",
                        "Action": "cloudwatch:PutMetricData",
                        "Condition": {
                            "StringEquals": {
                                "cloudwatch:namespace": "CloudWatchSynthetics"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:CreateNetworkInterface",
                            "ec2:DescribeNetworkInterfaces",
                            "ec2:DeleteNetworkInterface"
                        ],
                        "Resource": [
                            "*"
                        ]
                    }
                ]
            }
  canaryRole:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/service-role/"
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        MaxSessionDuration: 3600
        ManagedPolicyArns: 
          - !Ref canaryPolicy
        Description: "CloudWatch Synthetics lambda execution role for running canaries"
  
  localSyntheticsCanaryHome:
      Type: 'AWS::Synthetics::Canary'
      Properties:
          Name: !Sub regional-home${Env}
          ExecutionRoleArn: !GetAtt canaryRole.Arn
          Code: 
            Handler: pageLoadBlueprint.handler 
            Script: !Sub |
              import json
              import http.client
              from selenium.webdriver.common.by import By
              import urllib.parse
              from aws_synthetics.selenium import synthetics_webdriver as syn_webdriver
              from aws_synthetics.common import synthetics_logger as logger

              def verify_request(method, url, post_data=None, headers={}):
                  parsed_url = urllib.parse.urlparse(url)
                  user_agent = str(syn_webdriver.get_canary_user_agent_string())
                  if "User-Agent" in headers:
                      headers["User-Agent"] = f"{user_agent} {headers['User-Agent']}"
                  else:
                      headers["User-Agent"] = user_agent
                  logger.info(f"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}")
                  if parsed_url.scheme == "https":
                      conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)
                  else:
                      conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)
                  conn.request(method, url, post_data, headers)
                  response = conn.getresponse()
                  logger.info(f"Status Code: {response.status}")
                  logger.info(f"Response Headers: {json.dumps(response.headers.as_string())}")

                  if not response.status or response.status < 200 or response.status > 299:
                      try:
                          logger.error(f"Response: {response.read().decode()}")
                      finally:
                          if response.reason:
                              conn.close()
                              raise Exception(f"Failed: {response.reason}")
                          else:
                              conn.close()
                              raise Exception(f"Failed with status code: {response.status}")
                  logger.info(f"Response: {response.read().decode()}")
                  logger.info("HTTP request successfully executed.")
                  conn.close()
              def main():
                  url1 = "http://{{resolve:secretsmanager:Alb-${AWS::Region}${Env}:SecretString:DnsName}}/home"
                  method1 = 'GET'
                  postData1 = ""
                  headers1 = {}
                  verify_request(method1, url1, None, headers1)
                  logger.info("Canary successfully executed.")
              def handler(event, context):
                  logger.info("Selenium Python API canary.")
                  main()
          ArtifactS3Location: !Sub s3://${canaryBucket}
          RuntimeVersion: syn-python-selenium-2.0
          Schedule: 
            Expression: 'rate(1 minute)' 
            DurationInSeconds: 30
          RunConfig: 
            TimeoutInSeconds: 5
          FailureRetentionPeriod: 1
          SuccessRetentionPeriod: 1
          StartCanaryAfterCreation: true
  localSyntheticsCanaryCart:
      Type: 'AWS::Synthetics::Canary'
      Properties:
          Name: !Sub regional-cart${Env}
          ExecutionRoleArn: !GetAtt canaryRole.Arn
          Code: 
            Handler: pageLoadBlueprint.handler 
            Script: !Sub |
              import json
              import http.client
              from selenium.webdriver.common.by import By
              import urllib.parse
              from aws_synthetics.selenium import synthetics_webdriver as syn_webdriver
              from aws_synthetics.common import synthetics_logger as logger

              def verify_request(method, url, post_data=None, headers={}):
                  parsed_url = urllib.parse.urlparse(url)
                  user_agent = str(syn_webdriver.get_canary_user_agent_string())
                  if "User-Agent" in headers:
                      headers["User-Agent"] = f"{user_agent} {headers['User-Agent']}"
                  else:
                      headers["User-Agent"] = user_agent
                  logger.info(f"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}")
                  if parsed_url.scheme == "https":
                      conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)
                  else:
                      conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)
                  conn.request(method, url, post_data, headers)
                  response = conn.getresponse()
                  logger.info(f"Status Code: {response.status}")
                  logger.info(f"Response Headers: {json.dumps(response.headers.as_string())}")

                  if not response.status or response.status < 200 or response.status > 299:
                      try:
                          logger.error(f"Response: {response.read().decode()}")
                      finally:
                          if response.reason:
                              conn.close()
                              raise Exception(f"Failed: {response.reason}")
                          else:
                              conn.close()
                              raise Exception(f"Failed with status code: {response.status}")
                  logger.info(f"Response: {response.read().decode()}")
                  logger.info("HTTP request successfully executed.")
                  conn.close()
              def main():
                  url1 = "http://{{resolve:secretsmanager:Alb-${AWS::Region}${Env}:SecretString:DnsName}}/cart"
                  method1 = 'GET'
                  postData1 = ""
                  headers1 = {}
                  verify_request(method1, url1, None, headers1)
                  logger.info("Canary successfully executed.")
              def handler(event, context):
                  logger.info("Selenium Python API canary.")
                  main()
          ArtifactS3Location: !Sub s3://${canaryBucket}
          RuntimeVersion: syn-python-selenium-2.0
          Schedule: 
            Expression: 'rate(1 minute)' 
            DurationInSeconds: 30
          RunConfig: 
            TimeoutInSeconds: 5
          FailureRetentionPeriod: 1
          SuccessRetentionPeriod: 1
          StartCanaryAfterCreation: true
  localSyntheticsCanaryCatalog:
      Type: 'AWS::Synthetics::Canary'
      Properties:
          Name: !Sub regional-catalog${Env}
          ExecutionRoleArn: !GetAtt canaryRole.Arn
          Code: 
            Handler: pageLoadBlueprint.handler 
            Script: !Sub |
              import json
              import http.client
              from selenium.webdriver.common.by import By
              import urllib.parse
              from aws_synthetics.selenium import synthetics_webdriver as syn_webdriver
              from aws_synthetics.common import synthetics_logger as logger

              def verify_request(method, url, post_data=None, headers={}):
                  parsed_url = urllib.parse.urlparse(url)
                  user_agent = str(syn_webdriver.get_canary_user_agent_string())
                  if "User-Agent" in headers:
                      headers["User-Agent"] = f"{user_agent} {headers['User-Agent']}"
                  else:
                      headers["User-Agent"] = user_agent
                  logger.info(f"Making request with Method: '{method}' URL: {url}: Data: {json.dumps(post_data)} Headers: {json.dumps(headers)}")
                  if parsed_url.scheme == "https":
                      conn = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)
                  else:
                      conn = http.client.HTTPConnection(parsed_url.hostname, parsed_url.port)
                  conn.request(method, url, post_data, headers)
                  response = conn.getresponse()
                  logger.info(f"Status Code: {response.status}")
                  logger.info(f"Response Headers: {json.dumps(response.headers.as_string())}")

                  if not response.status or response.status < 200 or response.status > 299:
                      try:
                          logger.error(f"Response: {response.read().decode()}")
                      finally:
                          if response.reason:
                              conn.close()
                              raise Exception(f"Failed: {response.reason}")
                          else:
                              conn.close()
                              raise Exception(f"Failed with status code: {response.status}")
                  logger.info(f"Response: {response.read().decode()}")
                  logger.info("HTTP request successfully executed.")
                  conn.close()
              def main():
                  url1 = "http://{{resolve:secretsmanager:Alb-${AWS::Region}${Env}:SecretString:DnsName}}/catalog"
                  method1 = 'GET'
                  postData1 = ""
                  headers1 = {}
                  verify_request(method1, url1, None, headers1)
                  logger.info("Canary successfully executed.")
              def handler(event, context):
                  logger.info("Selenium Python API canary.")
                  main()
          ArtifactS3Location: !Sub s3://${canaryBucket}
          RuntimeVersion: syn-python-selenium-2.0
          Schedule: 
            Expression: 'rate(1 minute)' 
            DurationInSeconds: 30
          RunConfig: 
            TimeoutInSeconds: 5
          FailureRetentionPeriod: 1
          SuccessRetentionPeriod: 1
          StartCanaryAfterCreation: true